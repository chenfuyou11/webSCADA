//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using System.Linq;
    using Newtonsoft.Json;
    using System.Diagnostics;
    using CommonHelper;
    using System.Text.RegularExpressions;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class AP_Centrifuge_RealServices:BaseServices<AP_Centrifuge_Real>,IAP_Centrifuge_RealServices
    {
    	IAP_Centrifuge_RealRepository dal;
        IUPIEnergyRepository upidal;
        private long startTime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0)).Ticks;
        private TimeCheck check;
      #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
    	public AP_Centrifuge_RealServices(IAP_Centrifuge_RealRepository dal,
            IUPIEnergyRepository upiDal)
    	{
    		this.dal = dal;
    		base.baseDal = dal;
            check = new TimeCheck();
            upidal = upiDal;
    	}
        #endregion

        #region 针对此表的特殊操作写在此处
        #region 大数据界面空压机服务实现
        /// <summary>
        /// 大数据界面，空压机能效开关数据
        /// </summary>
        /// <param name="currtime">当前时间</param>
        /// <param name="begtime">之前时间</param>
        /// <returns></returns>
        public List<List<Model.ViewObject.CenSwitchStack_VO>> SwitchStackSer(DateTime currtime, DateTime begtime)
        {
            //随机数
            Random rr = new Random();
            var res = dal.QuerySplitPage(d => d.DateTime >= begtime && d.DateTime <= currtime, or => or.OrderByDescending(o => o.Id), 25, 1).Select(s => new
            {
                run = s.Run,
                id = s.Id,
                stationId = s.StationID,
                equId = s.EquipID,
                upi = s.UPI,
                time = s.DateTime
            }).OrderBy(o => o.id).ToList().Select(ss => new
            {
                upii = ss.upi,//upi值
                equId = ss.equId,//空压机几号
                time = ss.time,
                run = ss.run,//运行状态
                id = ss.id,
                stationId = ss.stationId
            }).OrderByDescending(o => o.upii).GroupBy(g => g.stationId).OrderBy(gg =>gg.Key).ToList();
            var upires=upidal.QueryWhere().OrderByDescending(o => o.UPI).ToList();
            int jcount = 0;
            //将25组查询数据分组放入集合中
            List<Model.ViewObject.CenSwitchStack_VO> upiarr = new List<Model.ViewObject.CenSwitchStack_VO>();
            foreach (var it in res)
            {
                foreach (var i in it)
                {
                    Model.ViewObject.CenSwitchStack_VO model = new Model.ViewObject.CenSwitchStack_VO()
                    {
                        UPI = Math.Round((double)upires.Find(x => x.StationID == i.stationId && x.EquipID == i.equId).UPI * 1000, 2),
                        Equid = Convert.ToInt32(Regex.Replace(i.equId, "[A-Z0]", "")),
                        Run = Convert.ToInt32(i.run),
                        Time = i.time.ToString()
                    };
                    upiarr.Add(model);
                    jcount++;
                }
            }
            //将25组数据分成7组到view
            List<List<Model.ViewObject.CenSwitchStack_VO>> all = new List<List<Model.ViewObject.CenSwitchStack_VO>>();
            for (int i = 0; i < 7; i++)
            {
                List<Model.ViewObject.CenSwitchStack_VO> test = new List<Model.ViewObject.CenSwitchStack_VO>();
                if (i < 6)
                {
                    test.Add(upiarr[i]);
                    test.Add(upiarr[i + 6 * 1]);
                    test.Add(upiarr[i + 6 * 2]);
                    test.Add(upiarr[i + 6 * 3]);
                }
                else
                {
                    Model.ViewObject.CenSwitchStack_VO model1 = new Model.ViewObject.CenSwitchStack_VO()
                    {
                        UPI = 0,
                        Equid = 0,
                        Run = 0,
                        Time = ""
                    };
                    test.Add(model1);
                    test.Add(model1);
                    test.Add(model1);
                    test.Add(upiarr[i + 6 * 3]);
                }
                all.Add(test);
            }
            return all;
        }
        /// <summary>
        /// 大数据界面空压机能效开关，upi不变，开关机变化
        /// </summary>
        /// <param name="currtime">当前时间</param>
        /// <param name="begtime">之前时间</param>
        /// <returns></returns>
        public List<int> SwitchSer(DateTime currtime, DateTime begtime)
        {
            //开关机接收集合，纯数字 0 关机，1开机 
            List<int> arr = new List<int>();
            //按顺序的空压机开关机情况
            var res = dal.QuerySplitPage(c => c.DateTime >= begtime && c.DateTime <= currtime, or => or.OrderByDescending(o => o.Id), 25, 1).Select(f => new
            {
                runTime = f.Run,
                id = f.Id,
                stationId = f.StationID,
                equId = f.EquipID

            }).OrderBy(f => f.id).ToList();
            int count = 0;//开机总数
            int count1 = 0;//空压站1开机数
            int count2 = 0;//空压站2开机数
            int count3 = 0;//空压站3开机数
            int count4 = 0;//空压站4开机数
            int countadd = 0;
            foreach (var item in res)
            {
                //空压站1
                if (countadd < 6 && item.runTime > 0)
                {
                    count++;
                    count1++;
                }
                //空压站2
                if (countadd > 5 && countadd < 12 && item.runTime > 0)
                {
                    count++;
                    count2++;
                }
                //空压站3
                if (countadd > 11 && countadd < 18 && item.runTime > 0)
                {
                    count++;
                    count3++;
                }
                //空压站4
                if (countadd > 17 && item.runTime > 0)
                {
                    count++;
                    count4++;
                }
                countadd++;
                arr.Add(Convert.ToInt32(item.runTime));
            }
            arr.Add(count);
            arr.Add(count1);
            arr.Add(count2);
            arr.Add(count3);
            arr.Add(count4);
            return arr;
        }
        #endregion
        #region 趋势分析空压机服务实现
        /// <summary>
        /// 趋势分析界面空压机所有数据
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="censtrlist">空压机标识id集合</param>
        /// <returns></returns>
        public object TrendCentri(DateTime currtime, DateTime begtime, List<string> censtrlist)
        {
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            if (censtrlist.Count < 2)
            {
                string str = censtrlist[0];
                string stastr = str.Substring(0, 4);
                string censtr = str.Substring(4, 4);
                var res = query.Where(x => x.StationID.Equals(stastr) && x.EquipID.Equals(censtr)).ToList().Select(s => new
                {
                    time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - startTime) / 10000,
                    flow = s.Q,
                    epower = s.ePower,
                    press = s.Outlet_P,
                    A = s.C,
                    upi = s.UPI,
                    dre = s.DRE,
                    bor = s.LossRatio,
                    igv = s.InletIOpen,
                    bov = s.DiscgargeOpen
                }).OrderBy(o => o.time).ToList();
                return res;
            }
            else
            {
                //扩展类where 此句是调用此类的必要语句
                var where = ExtendWhereClass.False<Model.AP_Centrifuge_Real>();
                //循环加载or语句
                foreach (var item in censtrlist)
                {
                    string stastr = item.Substring(0, 4);
                    string censtr = item.Substring(4, 4);
                    //var re12s= ExtendWhereClass.Or<AP_Centrifuge_History>(x => x.StationID.Equals(stastr),x=>x.EquipID.Equals(censtr));
                    //拼接的lambda表达式（or）
                    where = where.Or(x => x.StationID.Equals(stastr) && x.EquipID.Equals(censtr));
                }
                //将lambda放入查询where语句中查询结果
                var res = query.Where(where.Compile()).ToList().Select(s => new
                {
                    time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - startTime) / 10000,
                    flow = s.Q,
                    epower = s.ePower,
                    press = s.Outlet_P,
                    A = s.C,
                    upi = s.UPI,
                    dre = s.DRE,
                    bor = s.LossRatio,
                    igv = s.InletIOpen,
                    bov = s.DiscgargeOpen,
                    sta = s.StationID,
                    cen = s.EquipID
                }).OrderBy(o => o.time).GroupBy(g => new { g.sta, g.cen }).ToList();
                return res;
            }
        }
        /// <summary>
        /// 趋势分析界面空压机所有数据实时刷新
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="censtrlist">空压机标识id集合</param>
        /// <returns></returns>
        public object TrendCentriAjax(DateTime currtime, DateTime begtime, List<string> censtrlist)
        {
            var query = dal.QueryWhereDesc(d => d.DateTime >= begtime && d.DateTime <= currtime,or=>or.OrderByDescending(o=>o.Id));
            if (censtrlist.Count < 2)
            {
                string str = censtrlist[0];
                string stastr = str.Substring(0, 4);
                string censtr = str.Substring(4, 4);
                var res = query.Where(x => x.StationID.Equals(stastr) && x.EquipID.Equals(censtr)).ToList().Select(s => new
                {
                    time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - startTime) / 10000,
                    flow = s.Q,
                    epower = s.ePower,
                    press = s.Outlet_P,
                    A = s.C,
                    upi = s.UPI,
                    dre = s.DRE,
                    bor = s.LossRatio,
                    igv = s.InletIOpen,
                    bov = s.DiscgargeOpen
                }).FirstOrDefault();
                return res;
            }
            else
            {
                //扩展类where 此句是调用此类的必要语句
                var where = ExtendWhereClass.False<Model.AP_Centrifuge_Real>();
                //循环加载or语句
                foreach (var item in censtrlist)
                {
                    string stastr = item.Substring(0, 4);
                    string censtr = item.Substring(4, 4);
                    //拼接的lambda表达式（or）
                    where = where.Or(x => x.StationID.Equals(stastr) && x.EquipID.Equals(censtr));
                }
                //将lambda放入查询where语句中查询结果
                var res = query.Where(where.Compile()).ToList().Select(s => new
                {
                    time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - startTime) / 10000,
                    flow = s.Q,
                    epower = s.ePower,
                    press = s.Outlet_P,
                    A = s.C,
                    upi = s.UPI,
                    dre = s.DRE,
                    bor = s.LossRatio,
                    igv = s.InletIOpen,
                    bov = s.DiscgargeOpen,
                    sta = s.StationID,
                    cen = s.EquipID
                }).GroupBy(g => new { g.sta, g.cen }).Select(s => s.FirstOrDefault()).ToList();
                return res;
            }
        }
        #endregion
        #region 统计分析空压机服务实现方法
        /// <summary>
        /// 统计分析，空压站压力功率图，实时表
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="sid"></param>
        /// <returns></returns>
        public object StaMainpq(DateTime currtime, DateTime begtime, string sid)
        {
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            string sql = "select * from AP_Centrifuge_Real where DateTime>='" + begtime + "'and DateTime<='" + currtime + "'and StationID='" + sid + "'and Id%100<=25 and Id%100>0";

                var res = dal.QueryNoParams(sql).Select(s => new
                {
                    mainp = s.Outlet_P,
                    mainq = s.ePower,
                    staid = s.EquipID,
                    id=s.Id
                }).GroupBy(g => g.staid).ToList();
                return res;
        }
        /// <summary>
        /// 空压机实时数据图
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="sidcid"></param>
        /// <returns></returns>
        public object CentriProduceEpower(DateTime currtime,DateTime begtime,string sidcid)
        {
            var query= dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            string sid = sidcid.Substring(0, 4);
            string cid = sidcid.Substring(4, 4);
            var res = query.Where(x => x.StationID.Equals(sid) && x.EquipID.Equals(cid)&&x.Id%50<=25&&x.Id%50>0).Select(s => new
            {
                q = s.Q,
                e = s.ePower,
                s.DateTime,
                s.Id
            }).ToList();
            return res;
        }
        /// <summary>
        /// 空压机单耗放散率图，实时表
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="sidcid"></param>
        /// <returns></returns>
        public object CentriUpiLoss(DateTime currtime,DateTime begtime,string sidcid)
        {
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            string sid = sidcid.Substring(0, 4);
            string cid = sidcid.Substring(4, 4);
            var res = query.Where(x => x.StationID.Equals(sid) && x.EquipID.Equals(cid)&&x.Id%50<=25&&x.Id%50>0).Select(s => new
            {
                upi = s.UPI,
                loss = s.LossRatio
            }).ToList();
            return res;
        }
        public object CentriPEpower(DateTime currtime, DateTime begtime, string sidcid)
        {
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            string sid = sidcid.Substring(0, 4);
            string cid = sidcid.Substring(4, 4);
            var res = query.Where(x => x.StationID.Equals(sid) && x.EquipID.Equals(cid)&&x.Id%50<=25&&x.Id%50>0).Select(s => new
            {
                p = s.Outlet_P,
                e = s.ePower
            }).ToList();
            return res;
        }
        public object CentriBovLoss(DateTime currtime,DateTime begtime, string sidcid)
        {
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            string sid = sidcid.Substring(0, 4);
            string cid = sidcid.Substring(4, 4);
            var res = query.Where(x => x.StationID.Equals(sid) && x.EquipID.Equals(cid)).Select(s => new
            {
                bov = s.DiscgargeOpen,
                loss= s.LossRatio
            }).ToList();
            return res;
        }
        #endregion
        #endregion
    }
}
