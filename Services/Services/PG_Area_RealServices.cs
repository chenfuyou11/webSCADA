//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using System.Linq;
    using CommonHelper;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class PG_Area_RealServices:BaseServices<PG_Area_Real>,IPG_Area_RealServices
    {
        IBB_AreaRepository bbdal;
    	IPG_Area_RealRepository dal;
        private long startTime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0)).Ticks;
        #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
        public PG_Area_RealServices(IPG_Area_RealRepository dal, IBB_AreaRepository tbbdal)
    	{
    		this.dal = dal;
    		base.baseDal = dal;
            bbdal = tbbdal;
    	}
        #endregion

        #region 针对此表的特殊操作写在此处
        #region 大数据界面用户区域用气量服务实现
        /// <summary>
        /// 大数据界面用户区域用气量数据
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <returns></returns>
        public object GasUseSer(DateTime currtime, DateTime begtime)
        {
            //获取区域信息
            var bbarea = bbdal.QueryWhere(x => true);
            //Join ef联表查询 ，一个表的结果集合join另一个表的结果集合，然后用相同字段
            var res = dal.QuerySplitPage(d => d.DateTime >= begtime && d.DateTime <= currtime, or => or.OrderByDescending(o => o.Id), 25, 1).Select(s => new {
                inletSQ = Math.Round((decimal)s.Inlet_SQ, 2),
                areaID = s.AreaID
            }).OrderBy(o => o.areaID).Join(bbarea, m => m.areaID, n => n.Code, (m, n) => new
            {
                value = m.inletSQ,//单位kNm3
                name = n.Name
            }).ToList();
            return res;
        }
        #endregion
        #region 趋势分析用户区域服务实现
        /// <summary>
        /// 趋势分析界面用户区域所有数据
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="aid"></param>
        /// <returns></returns>
        public object TrendArea(DateTime currtime, DateTime begtime, List<string> aid)
        {
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            if (aid.Count < 2)
            {
                var areaid = aid[0];
                var res = query.Where(x => x.AreaID.Equals(areaid)).ToList().Select(s => new
                {
                    time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - startTime) / 10000,
                    flow = s.Inlet_SQ,
                    press = s.Inlet_AP*10//转换单位
                }).OrderBy(o => o.time).ToList();
                return res;
            }
            else
            {
                var where = ExtendWhereClass.False<Model.PG_Area_Real>();
                foreach (var item in aid)
                {
                    where = where.Or(x => x.AreaID.Equals(item));
                }
                var res = query.Where(where.Compile()).ToList().Select(s => new
                {
                    time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - startTime) / 10000,
                    flow = s.Inlet_SQ,
                    press = s.Inlet_AP*10,//转换单位
                    area = s.AreaID
                }).OrderBy(o => o.area).GroupBy(g => new { g.area }).ToList();
                return res;
            }


        }
        /// <summary>
        /// 趋势分析界面用户区域所有数据实时刷新数据
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="aid">区域标识id集合</param>
        /// <returns></returns>
        public object TrendAreaAjax(DateTime currtime, DateTime begtime, List<string> aid)
        {
            var query = dal.QueryWhereDesc(d => d.DateTime >= begtime && d.DateTime <= currtime,or=>or.OrderByDescending(o=>o.Id));
            if (aid.Count < 2)
            {
                var areaid = aid[0];
                var res = query.Where(x => x.AreaID.Equals(areaid)).ToList().Select(s => new
                {
                    time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - startTime) / 10000,
                    flow = s.Inlet_SQ,
                    press = s.Inlet_AP*10,
                }).FirstOrDefault();
                return res;
            }
            else
            {
                var where = ExtendWhereClass.False<Model.PG_Area_Real>();
                foreach (var item in aid)
                {
                    where = where.Or(x => x.AreaID.Equals(item));
                }
                var res = query.Where(where.Compile()).ToList().Select(s => new
                {

                    time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - startTime) / 10000,
                    flow = s.Inlet_SQ,
                    press = s.Inlet_AP*10,
                    areaid = s.AreaID
                }).OrderBy(o => o.areaid).GroupBy(g => g.areaid).Select(s => s.FirstOrDefault()).ToList();
                return res;
            }

        }
        #endregion
        #endregion
    }
}
