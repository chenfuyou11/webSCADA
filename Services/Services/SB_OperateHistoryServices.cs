//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using System.Linq;
    using CommonHelper;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class SB_OperateHistoryServices : BaseServices<SB_OperateHistory>, ISB_OperateHistoryServices
    {
        ISB_OperateHistoryRepository dal;
        ISB_PageRepository pagedal;
        IBB_InstrumentRepository indal;
        #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
        public SB_OperateHistoryServices(ISB_OperateHistoryRepository dal, ISB_PageRepository tpagedal,
            IBB_InstrumentRepository tindal)
        {
            this.dal = dal;
            base.baseDal = dal;
            pagedal = tpagedal;
            indal = tindal;
        }
        #endregion

        #region 针对此表的特殊操作写在此处
        public object OperatSysRecord(int limit, int page, string name, string begtime, string currtime, string type)
        {
            List<Model.SB_OperateHistory> hismodel = new List<SB_OperateHistory>();
            int count = 0;
            string opt = "";
            if (type != null && type != "")
            {
                if (type == "系统")
                {
                    opt = "0";
                }
                else if (type == "设备")
                {
                    opt = "1";
                }
                else
                {
                    opt = "2";
                }
                if (name != null && name != "")
                {
                    if (begtime != null && currtime != null && begtime != "" && currtime != "")
                    {
                        var time1 = DateTime.Parse(begtime);
                        var time2 = DateTime.Parse(currtime);
                        //类型-名字-时间
                        hismodel = dal.QuerySplitPage(d => d.OperateTime >= time1 && d.OperateTime <= time2 && d.UserName.Equals(name) && d.OperateType.Equals(opt), order => order.OrderByDescending(o => o.ID), limit, page).ToList();
                        count = dal.Count(d => d.OperateTime >= time1 && d.OperateTime <= time2 && d.UserName.Equals(name) && d.OperateType.Equals(opt));
                    }
                    else
                    {//类型-名字
                        hismodel = dal.QuerySplitPage(d => d.UserName.Equals(name) && d.OperateType.Equals(opt), order => order.OrderByDescending(o => o.ID), limit, page).ToList();
                        count = dal.Count(d => d.UserName.Equals(name) && d.OperateType.Equals(opt));
                    }
                }
                else
                {//类型-时间
                    if (begtime != null && currtime != null && begtime != "" && currtime != "")
                    {
                        var time1 = DateTime.Parse(begtime);
                        var time2 = DateTime.Parse(currtime);
                        hismodel = dal.QuerySplitPage(d => d.OperateTime >= time1 && d.OperateTime <= time2 && d.OperateType.Equals(opt), order => order.OrderByDescending(o => o.ID), limit, page).ToList();
                        count = dal.Count(d => d.OperateTime >= time1 && d.OperateTime <= time2&& d.OperateType.Equals(opt));
                    }
                    else
                    {
                        //类型
                        hismodel = dal.QuerySplitPage(d => d.OperateType.Equals(opt), order => order.OrderByDescending(o => o.ID), limit, page).ToList();
                        count = dal.Count(d => d.OperateType.Equals(opt));
                    }
                }
            }
            else
            {
                if (name != null && name != "")
                {
                    if (begtime != null && currtime != null && begtime != "" && currtime != "")
                    {
                        var time1 = DateTime.Parse(begtime);
                        var time2 = DateTime.Parse(currtime);
                        //名字-时间
                        hismodel = dal.QuerySplitPage(d => d.OperateTime >= time1 && d.OperateTime <= time2 && d.UserName.Equals(name), order => order.OrderByDescending(o => o.ID), limit, page).ToList();
                        count = dal.Count(d => d.OperateTime >= time1 && d.OperateTime <= time2 && d.UserName.Equals(name));
                    }
                    else
                    {//名字
                        hismodel = dal.QuerySplitPage(d => d.UserName.Equals(name), order => order.OrderByDescending(o => o.ID), limit, page).ToList();
                        count = dal.Count(d =>d.UserName.Equals(name));
                    }
                }
                else
                {//时间
                    if (begtime != null && currtime != null && begtime != "" && currtime != "")
                    {
                        var time1 = DateTime.Parse(begtime);
                        var time2 = DateTime.Parse(currtime);
                        hismodel = dal.QuerySplitPage(d => d.OperateTime >= time1 && d.OperateTime <= time2, order => order.OrderByDescending(o => o.ID), limit, page).ToList();
                        count = dal.Count(d => d.OperateTime >= time1 && d.OperateTime <= time2);
                    }
                    else
                    {//全部
                        hismodel = dal.QuerySplitPage(d => true, order => order.OrderByDescending(o => o.ID), limit, page).ToList();
                        count = dal.Count();
                    }
                }
            }
            var res = hismodel.Select(s => new
            {
                OperateTime = DateTime.Parse("" + s.OperateTime).ToString("yyyy/MM/dd HH:mm:ss"),
                s.UserName,
                s.IPAddress,
                OperateType = Enum.GetName(typeof(Enums.ParentType), Convert.ToInt32(s.OperateType)),
                OperateChildType = Enum.GetName(typeof(Enums.ChildType), Convert.ToInt32(s.OperateChildType)),
                s.OperateRecord,
                s.PageURL,
                s.PageNameCN,
                s.ClientID,
                s.Valid,
                s.Remark
            });
            
            var tranres = new
            {
                code = 0,
                msg = "success",
                data = res,
                count
            };
            return tranres;
        }
        public int OperatRecordAdd(int? InstrumentID, string OperateChildType,string VisitUrl,Model.SB_User usermodel,int? AreaID)
        {
            try {
                //GetIpHelper ipmodel = new GetIpHelper();
                var ip = GetIpHelper.GetWebClientIp();

            var time = DateTime.Now;
            if (InstrumentID == null&&AreaID==null)
            {
                var pagecn = pagedal.QueryWhere(p => p.URL.Equals(VisitUrl)).Select(s => s.PageNameCN).FirstOrDefault();
                var record = usermodel.Account + "在" + time + "访问" + pagecn + "界面" + VisitUrl;
                Model.SB_OperateHistory operatmodel = new Model.SB_OperateHistory()
                {
                    UserId = usermodel.ID,
                    UserName = usermodel.Name,
                    IPAddress = ip,
                    PageURL = VisitUrl,
                    PageNameCN = pagecn,
                    OperateTime = time,
                    OperateChildType = OperateChildType,
                    OperateRecord = record,
                    OperateType = "0",
                    ClientID = usermodel.ClientID,
                    Remark = "等待",
                    Valid = "1",
                    AreaID = 0,
                    FactoryID = 0,
                    InstrumentID = 0,
                    StationID=0
                };
                dal.Add(operatmodel);
               int ress= dal.SaveChanges();
                return ress;
            }
            else
            {
                var instrures = indal.Find(new object[] { InstrumentID });
                var record = "";
                Model.SB_OperateHistory operatmodel = new Model.SB_OperateHistory()
                {
                    UserId = usermodel.ID,
                    UserName = usermodel.Name,
                    IPAddress = ip,
                    OperateTime = time,
                    OperateChildType = OperateChildType,
                    OperateRecord = record,
                    OperateType = "1",
                    ClientID = instrures.ClientID,
                    AreaID = AreaID,
                    StationID = instrures.StationID,
                    FactoryID = instrures.FactoryID,
                    InstrumentID = instrures.ID,
                    Remark = "等待",
                    Valid = "1"
                };
                dal.Add(operatmodel);
                int ress = dal.SaveChanges();
                return ress;
            }
            }catch(Exception e)
            {
                throw new Exception("" + e.Data);
            }
        }
        #endregion
    } 
}
