//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using System.Linq;
    using CommonHelper;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class SB_UserServices:BaseServices<SB_User>,ISB_UserServices
    {
    	ISB_UserRepository dal;
        ISB_ClientRepository cdal;
        #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
        public SB_UserServices(ISB_UserRepository dal, ISB_ClientRepository tcdal)
        {
            this.dal = dal;
            base.baseDal = dal;
            cdal = tcdal;
        }
      #endregion
    
       #region 针对此表的特殊操作写在此处
         public object UserList(int limit,int page, string account, string name, string contact, string state)
        {
            var query = dal.QueryWhere();
            if (account != null)
            {
               query= query.Where(w => w.Account.Equals(account));
            }
            if (contact != null)
            {
                query = query.Where(w => w.Name.Equals(contact));
            }
            if (state != null)
            {
                if (state == Enums.OnWork.在职.ToString())
                {
                    state = "1";
                }
                if(state== Enums.OnWork.在职.ToString())
                {
                    state = "0";
                }
                query = query.Where(w => w.State.Equals(state));
            }
            if (name != null)
            {
                var nameres = cdal.QueryWhere(c => c.Name.Equals(name)).FirstOrDefault();
                if (nameres !=null)
                {
                    query = query.Where(w => w.ClientID == nameres.ID);
                }
            }

            var res = query.OrderBy(o=>o.ID).Skip((page-1)*limit).Take(limit).ToList().Select(s=>new {
                s.ID,
                s.Account,
                s.PassWord,
                s.Name,
                s.UserType,
                Sex= Enum.GetName(typeof(Enums.Sex),Convert.ToInt32(s.Sex)),
                s.IDNo,
                s.Cellphone,
                s.Email,
                ClientID=cdal.Find(new object[] { s.ClientID}).Name,
                s.Remark,
                State= Enum.GetName(typeof(Enums.OnWork), Convert.ToInt32(s.State))
            }).ToList();
            var count = query.Count();
            var tranres = new
            {
                code = 0,
                msg = "success",
                data = res,
                count
            };
            return tranres;
        }
        public Model.BussionObject.UserShow_BO ModiUser(Guid uid)
        {
            var res = dal.Find(new object[] { uid});
            Model.BussionObject.UserShow_BO model = new Model.BussionObject.UserShow_BO()
            {
                boAccount = res.Account,
                boCellphone = res.Cellphone,
                boClientID = res.ClientID,
                boEmail = res.Email,
                boID = res.ID,
                boIDNo = res.IDNo,
                boName = res.Name,
                boPassWord = res.PassWord,
                boRemark = res.Remark,
                boSex = res.Sex,
                boState = res.State,
                boUserType = res.UserType
            };
            return model;
        }
        public int ModiUser(Model.BussionObject.UserShow_BO model)
        {
            Model.SB_User usermodel = new SB_User()
            {
                
                Account = model.boAccount,
                Cellphone = model.boCellphone,
                ClientID = model.boClientID,
                Email = model.boEmail,
                IDNo = model.boIDNo,
                ID = model.boID,
                Name = model.boName,
                PassWord = model.boPassWord,
                Remark = model.boRemark,
                Sex = model.boSex,
                State = model.boState,
                UserType = model.boUserType
            };
            dal.Update(usermodel);
            var res = dal.SaveChanges();
            return res;
        }
        public List<SB_User> QueryAll()
        {
            var res=dal.QueryWhere().ToList();
            return res;
        }
        public int AddUser(Model.BussionObject.UserShow_BO model)
        {
            Model.SB_User usermodel = new SB_User()
            {

                Account = model.boAccount,
                Cellphone = model.boCellphone,
                ClientID = model.boClientID,
                Email = model.boEmail,
                IDNo = model.boIDNo,
                ID = Guid.NewGuid(),
                Name = model.boName,
                PassWord = model.boPassWord,
                Remark = model.boRemark,
                Sex = model.boSex,
                State = model.boState,
                UserType = model.boUserType
            };
            dal.Add(usermodel);
            var res = dal.SaveChanges();
            return res;
        }
        public int ValidAccount(string account)
        {
          var res=  dal.QueryWhere(d => d.Account.Equals(account)).FirstOrDefault();
            if (res != null)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
       public  Model.BussionObject.UserShow_BO ShowUser(string account)
        {
            SB_User res = dal.QueryWhere(x => x.Account.Equals(account)).FirstOrDefault();
            Model.BussionObject.UserShow_BO model = new Model.BussionObject.UserShow_BO()
            {
                boAccount = res.Account,
                boCellphone = res.Cellphone,
                boClientID = res.ClientID,
                boEmail = res.Email,
                boID = res.ID,
                boIDNo = res.IDNo,
                boName = res.Name,
                boPassWord = res.PassWord,
                boRemark = res.Remark,
                boSex = res.Sex,
                boState = res.State,
                boUserType = res.UserType
            };
            return model;
        }
      #endregion
    } 
}
