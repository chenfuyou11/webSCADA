//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using CommonHelper;
    using System.Linq;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class AP_AdsorptionDryer_RealServices:BaseServices<AP_AdsorptionDryer_Real>,IAP_AdsorptionDryer_RealServices
    {
    	IAP_AdsorptionDryer_RealRepository dal;
        private long startTime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0)).Ticks;
        #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
        public AP_AdsorptionDryer_RealServices(IAP_AdsorptionDryer_RealRepository dal)
    	{
    		this.dal = dal;
    		base.baseDal = dal;
    	}
        #endregion

        #region 针对此表的特殊操作写在此处
        #region 趋势分析
        public object TrendDryer(DateTime currtime, DateTime begtime, List<string> Drystrlist)
        {
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            if (Drystrlist.Count < 2)
            {
                string str = Drystrlist[0];
                string stastr = str.Substring(0, 4);
                string drystr = str.Substring(4, 4);
                var res = query.Where(x => x.StationID.Equals(stastr) && x.EquipID.Equals(drystr)).Select(ss=>new {
                    ss.CDryer_InletPre,
                    ss.CDryer_OutPre,
                    ss.CDyer_InOutValue,
                    ss.CDyer_DewPoint,
                    ss.DateTime
                }).ToList().Select(s => new
                {
                    time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - startTime) / 10000,
                    inpre = Math.Round((double)s.CDryer_InletPre / 100, 1),
                    outpre = Math.Round((double)s.CDryer_OutPre / 100, 1),
                    inout = Math.Round((double)s.CDyer_InOutValue / 100, 1),//转换单位
                    dewp = s.CDyer_DewPoint,
                }).OrderBy(o => o.time).ToList();
                return res;
            }
            else
            {
                //扩展类where 此句是调用此类的必要语句
                var where = ExtendWhereClass.False<Model.AP_AdsorptionDryer_Real>();
                //循环加载or语句
                foreach (var item in Drystrlist)
                {
                    string stastr = item.Substring(0, 4);
                    string censtr = item.Substring(4, 4);
                    //var re12s= ExtendWhereClass.Or<AP_Centrifuge_History>(x => x.StationID.Equals(stastr),x=>x.EquipID.Equals(censtr));
                    //拼接的lambda表达式（or）
                    where = where.Or(x => x.StationID.Equals(stastr) && x.EquipID.Equals(censtr));
                }
                //将lambda放入查询where语句中查询结果
                var res = query.Where(where.Compile()).ToList().Select(ss => new {
                    ss.CDryer_InletPre,
                    ss.CDryer_OutPre,
                    ss.CDyer_InOutValue,
                    ss.CDyer_DewPoint,
                    ss.DateTime,
                    ss.StationID,
                    ss.EquipID
                }).ToList().Select(s => new
                {
                    time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - startTime) / 10000,
                    inpre = Math.Round((double)s.CDryer_InletPre / 100, 1),
                    outpre = Math.Round((double)s.CDryer_OutPre / 100, 1),
                    inout = Math.Round((double)s.CDyer_InOutValue / 100, 1),
                    dewp = s.CDyer_DewPoint,
                    sta=s.StationID,
                    dry=s.EquipID
                }).OrderBy(o => o.time).GroupBy(g => new { g.sta, g.dry }).ToList();
                return res;
            }
        }
        public object TrendDryerAjax(DateTime currtime, DateTime begtime, List<string> Drystrlist)
        {
            var query = dal.QueryWhereDesc(d => d.DateTime >= begtime && d.DateTime <= currtime,or=>or.OrderByDescending(o=>o.Id));
            if (Drystrlist.Count < 2)
            {
                string str = Drystrlist[0];
                string stastr = str.Substring(0, 4);
                string drystr = str.Substring(4, 4);
                var res = query.Where(x => x.StationID.Equals(stastr) && x.EquipID.Equals(drystr)).Select(ss => new {
                    ss.CDryer_InletPre,
                    ss.CDryer_OutPre,
                    ss.CDyer_InOutValue,
                    ss.CDyer_DewPoint,
                    ss.DateTime
                }).ToList().Select(s => new
                {
                    time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - startTime) / 10000,
                    inpre =Math.Round((double) s.CDryer_InletPre/100,1),
                    outpre = Math.Round((double)s.CDryer_OutPre / 100, 1),
                    inout = Math.Round((double)s.CDyer_InOutValue / 100, 1),
                    dewp = s.CDyer_DewPoint,
                }).FirstOrDefault();
                return res;
            }
            else
            {
                //扩展类where 此句是调用此类的必要语句
                var where = ExtendWhereClass.False<Model.AP_AdsorptionDryer_Real>();
                //循环加载or语句
                foreach (var item in Drystrlist)
                {
                    string stastr = item.Substring(0, 4);
                    string censtr = item.Substring(4, 4);
                    //var re12s= ExtendWhereClass.Or<AP_Centrifuge_History>(x => x.StationID.Equals(stastr),x=>x.EquipID.Equals(censtr));
                    //拼接的lambda表达式（or）
                    where = where.Or(x => x.StationID.Equals(stastr) && x.EquipID.Equals(censtr));
                }
                //将lambda放入查询where语句中查询结果
                var res = query.Where(where.Compile()).ToList().Select(ss => new {
                    ss.CDryer_InletPre,
                    ss.CDryer_OutPre,
                    ss.CDyer_InOutValue,
                    ss.CDyer_DewPoint,
                    ss.DateTime,
                    ss.StationID,
                    ss.EquipID
                }).ToList().Select(s => new
                {
                    time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - startTime) / 10000,
                    inpre = Math.Round((double)s.CDryer_InletPre / 100, 1),
                    outpre = Math.Round((double)s.CDryer_OutPre / 100, 1),
                    inout = Math.Round((double)s.CDyer_InOutValue / 100, 1),
                    dewp = s.CDyer_DewPoint,
                    sta = s.StationID,
                    dry = s.EquipID
                }).OrderBy(o => o.time).GroupBy(g => new { g.sta, g.dry }).Select(s=>s.FirstOrDefault()).ToList();
                return res;
            }
        }
        #endregion
        #endregion
    }
}
