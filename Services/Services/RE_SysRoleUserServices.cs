//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using System.Linq;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class RE_SysRoleUserServices:BaseServices<RE_SysRoleUser>,IRE_SysRoleUserServices
    {
    	IRE_SysRoleUserRepository dal;
        ISB_UserRepository userdal;
        ISB_SysRoleServices roledal;
        ISB_PageRepository pagedal;
        IRE_SysRolePageRepository rolepagedal;
      #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
    	public RE_SysRoleUserServices(IRE_SysRoleUserRepository dal,
            ISB_UserRepository tuserdal, 
            ISB_SysRoleServices troledal,
            ISB_PageRepository tpagedal,
            IRE_SysRolePageRepository trolepagedal)
    	{
    		this.dal = dal;
    		base.baseDal = dal;
            userdal = tuserdal;
            roledal = troledal;
            pagedal = tpagedal;
            rolepagedal = trolepagedal;
    	}
      #endregion
    
       #region 针对此表的特殊操作写在此处
         public object RoleUser(int Roleid,int page,int limit,string account)
        {try
            {
                //人员表
                var userres = userdal.QueryWhere();
                //角色表
                var roleres = roledal.QueryWhere();
                //角色人员表
                var res = dal.QueryWhere(d => d.SysRoleID == Roleid);
                var allres = dal.QueryWhere(d => d.SysRoleID == Roleid);
                if (account != null)
                {
                   var userid= userres.Where(u => u.Account.Contains(account)).ToList();
                    List<Guid?> arr = new List<Guid?>();
                    if (userid.Count() > 0)
                    {
                        foreach(var item in userid)
                        {
                            arr.Add(item.ID);
                        }
                        res = res.Where(d => arr.Contains(d.UserID));
                    }
                    else
                    {
                        res = res.Where(d => d.UserID == null);
                    }
                   
                }
                //通过角色id查出对应角色用户表
                var tt = res.OrderBy(o => o.ID).Skip((page - 1) * limit).Take(limit).Join(userres, m => m.UserID, n => n.ID, (m, n) => new { m.SysRoleID, rname = n.Name, n.Account, m.UserID}).ToList();

                List<Model.ViewObject.RoleUser_VO> listmodel = new List<Model.ViewObject.RoleUser_VO>();

                foreach (var item in tt)
                {
                    var roleall = roleres.Join(dal.QueryWhere(d => d.UserID == item.UserID), m => m.ID, n => n.SysRoleID, (m, n) => new
                    {
                        m.Name
                    }).ToList();
                    var str = "";
                    if (roleall.Count() > 0)
                    {
                        foreach (var it in roleall)
                        {
                            str += it.Name + ";";
                        }
                        Model.ViewObject.RoleUser_VO model = new Model.ViewObject.RoleUser_VO()
                        {
                            Name = item.rname,
                            Account = item.Account,
                            AllRole = str
                        };
                        listmodel.Add(model);
                    }
                }

                var Count = res.Count();
                var tranres = new
                {
                    code = 0,
                    msg = "success",
                    data = listmodel,
                    count = Count
                };
                return tranres;
            }catch(Exception e)
            {
                throw new Exception(e.Message);
            }
        }  
        public object AddRoleUser(int Roleid,int limit,int page)
        {
            //拥有改角色id的人员
           var res= dal.QueryWhere(d => d.SysRoleID == Roleid);
            //人员表
            var userres = userdal.QueryWhere();
            foreach(var item in res)
            {
                userres = userres.Where(u => u.ID != item.UserID);
            }

            var result = userres.OrderBy(o=>o.Account).Skip((page-1)*limit).Take(limit).Select(s=>new {
                s.ID,
                s.Account,
                s.Name
            }).ToList();
            var count = userres.Count();
            var tranres = new
            {
                code = 0,
                msg = "success",
                data = result,
                count = count
            };
            return tranres;
        }
        public int AddRangeUserRole(List<Guid> list, int roleid)
        {
            List<Model.RE_SysRoleUser> all = new List<RE_SysRoleUser>();
            foreach (var item in list)
            {
                Model.RE_SysRoleUser sysrolelist = new RE_SysRoleUser()
                {
                    SysRoleID = roleid,
                    UserID = item
                };
                all.Add(sysrolelist);
            }
            dal.AddRange(all);
            int b = dal.SaveChanges();
            return b;
        }
        public int DeleteRoleUser(string account,int roleid)
        {
            var ures = userdal.QueryWhere(u => u.Account.Equals(account)).FirstOrDefault().ID;
            var res = dal.QueryWhere(d => d.UserID == ures && d.SysRoleID == roleid).FirstOrDefault();
            dal.Delete(res,true);
            int b=dal.SaveChanges();
            return b;
        }
        #endregion
    } 
}
