//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using System.Linq;
    using CommonHelper;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class AP_Centrifuge_StatisticsServices:BaseServices<AP_Centrifuge_Statistics>,IAP_Centrifuge_StatisticsServices
    {
    	IAP_Centrifuge_StatisticsRepository dal;
        private TimeCheck check;
        IAP_Centrifuge_HistoryServices redal;
      #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
    	public AP_Centrifuge_StatisticsServices(IAP_Centrifuge_StatisticsRepository dal, IAP_Centrifuge_HistoryServices tredal)
    	{
    		this.dal = dal;
    		base.baseDal = dal;
            redal = tredal;
            check = new TimeCheck();
    	}
        #endregion

        #region 针对此表的特殊操作写在此处
        public List<Model.Stack> StackSer(DateTime currtime, DateTime begtime)
        {
            var res = dal.QueryWhere(s => s.DateTime >= begtime && s.DateTime <= currtime).GroupBy(g => new { g.StationID, g.EquipID }).Select(f => new
            {
                staid = f.Key.StationID,
                equid = f.Key.EquipID,
                upi = Math.Round((decimal)f.Average(u => u.UPI),3)
            });

            List<Model.Stack> stackres = new List<Model.Stack>();
            int count = 1;
            // Regex.Replace(item.equipId, "[A-Z0]", "") + "#"
            foreach (var item in res)
            {
                Model.Stack stack = new Model.Stack()
                {
                    Number = item.upi,
                    Str = count.ToString() + "#"

                };
                count++;
                stackres.Add(stack);
            }
            return stackres;
        }

        public List<decimal[]> CenlossSer(DateTime currtime, DateTime begtime, double[] arr)
        {
            var checktime = check.CheckTicks(begtime, currtime);
            //查历史表全部时间间隔内小于200分钟
            if (checktime[2] < 200)
            {
                int b = (int)checktime[2] / 10 * 25 - 25;
                var res = redal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.Id % b <= 25 && d.Id % b > 0).Select(s => new
                {
                    loss = s.LossRatio,
                    staid = s.StationID,
                    eqid = s.EquipID
                }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                List<decimal[]> allres = new List<decimal[]>();
                foreach (var item in res)
                {
                    int[] arr1 = new int[arr.Length];
                    foreach (var ite in item)
                    {
                        for (int i = 0; i < arr.Length - 1; i++)
                        {
                            if (ite.loss >= (decimal)arr[i] && ite.loss <(decimal) arr[i + 1])
                            {
                                arr1[i]++;
                            }
                            else if (ite.loss >=(decimal) arr[arr.Length - 1])
                            {
                                arr1[arr.Length - 1]++;
                            }
                        }
                    }
                    decimal[] dearr = new decimal[arr.Length];
                    int sum = arr1.Sum();
                    for (int i = 0; i < arr.Length; i++)
                    {
                        dearr[i] = Math.Round((decimal)arr1[i] / sum * 100, 2);
                    }
                    allres.Add(dearr);
                }
                return allres;
            }
            //大于200分钟取值统计分钟表
            else if (checktime[2] >= 200 && checktime[2] < 6000)
            {
                int b = (int)checktime[2] / 100 * 25 - 25;
                var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("F") && d.Id % b <= 25 && d.Id % b > 0).Select(s => new
                {
                    loss = s.LossRatio,
                    staid = s.StationID,
                    eqid = s.EquipID
                }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                List<decimal[]> allres = new List<decimal[]>();
                foreach (var item in res)
                {
                    int[] arr1 = new int[arr.Length];
                    foreach (var ite in item)
                    {
                        for (int i = 0; i < arr.Length - 1; i++)
                        {
                            if (ite.loss >= (decimal)arr[i] && ite.loss < (decimal)arr[i + 1])
                            {
                                arr1[i]++;
                            }
                            else if (ite.loss >= (decimal)arr[arr.Length - 1])
                            {
                                arr1[arr.Length - 1]++;
                            }
                        }
                    }
                    decimal[] dearr = new decimal[arr.Length];
                    int sum = arr1.Sum();
                    for (int i = 0; i < arr.Length; i++)
                    {
                        dearr[i] = Math.Round((decimal)arr1[i] / sum * 100, 2);
                    }
                    allres.Add(dearr);
                }
                return allres;
            }
            //大于6000分钟100小时
            else
            {
                if (checktime[1] < 2400)
                {
                    int b = (int)checktime[1] / 100;
                    if (b >= 3)
                    {
                        int c = b * 25 - 25;
                        var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("H") && d.Id % c <= 25 && d.Id % c > 0).Select(s => new
                        {
                            loss = s.LossRatio,
                            staid = s.StationID,
                            eqid = s.EquipID
                        }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                        List<decimal[]> allres = new List<decimal[]>();
                        foreach (var item in res)
                        {
                            int[] arr1 = new int[arr.Length];
                            foreach (var ite in item)
                            {
                                for (int i = 0; i < arr.Length - 1; i++)
                                {
                                    if (ite.loss >= (decimal)arr[i] && ite.loss < (decimal)arr[i + 1])
                                    {
                                        arr1[i]++;
                                    }
                                    else if (ite.loss >= (decimal)arr[arr.Length - 1])
                                    {
                                        arr1[arr.Length - 1]++;
                                    }
                                }
                            }
                            decimal[] dearr = new decimal[arr.Length];
                            int sum = arr1.Sum();
                            for (int i = 0; i < arr.Length; i++)
                            {
                                dearr[i] = Math.Round((decimal)arr1[i] / sum * 100, 2);
                            }
                            allres.Add(dearr);
                        }
                        return allres;
                    }
                    else
                    {
                        var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("H") && d.Id % 25 <= 25 && d.Id % 25 > 0).Select(s => new
                        {
                            loss = s.LossRatio,
                            staid = s.StationID,
                            eqid = s.EquipID
                        }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                        List<decimal[]> allres = new List<decimal[]>();
                        foreach (var item in res)
                        {
                            int[] arr1 = new int[arr.Length];
                            foreach (var ite in item)
                            {
                                for (int i = 0; i < arr.Length - 1; i++)
                                {
                                    if (ite.loss >= (decimal)arr[i] && ite.loss < (decimal)arr[i + 1])
                                    {
                                        arr1[i]++;
                                    }
                                    else if (ite.loss >= (decimal)arr[arr.Length - 1])
                                    {
                                        arr1[arr.Length - 1]++;
                                    }
                                }
                            }
                            decimal[] dearr = new decimal[arr.Length];
                            int sum = arr1.Sum();
                            for (int i = 0; i < arr.Length; i++)
                            {
                                dearr[i] = Math.Round((decimal)arr1[i] / sum * 100, 2);
                            }
                            allres.Add(dearr);
                        }
                        return allres;
                    }
                }
                //大于100天
                else
                {
                    int b = (int)checktime[0] / 100;
                    if (b >= 3)
                    {
                        int c = b * 25 - 25;
                        var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("D") && d.Id % c <= 25 && d.Id % c > 0).Select(s => new
                        {
                            loss = s.LossRatio,
                            staid = s.StationID,
                            eqid = s.EquipID
                        }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                        List<decimal[]> allres = new List<decimal[]>();
                        foreach (var item in res)
                        {
                            int[] arr1 = new int[arr.Length];
                            foreach (var ite in item)
                            {
                                for (int i = 0; i < arr.Length - 1; i++)
                                {
                                    if (ite.loss >= (decimal)arr[i] && ite.loss < (decimal)arr[i + 1])
                                    {
                                        arr1[i]++;
                                    }
                                    else if (ite.loss >= (decimal)arr[arr.Length - 1])
                                    {
                                        arr1[arr.Length - 1]++;
                                    }
                                }
                            }
                            decimal[] dearr = new decimal[arr.Length];
                            int sum = arr1.Sum();
                            for (int i = 0; i < arr.Length; i++)
                            {
                                dearr[i] = Math.Round((decimal)arr1[i] / sum * 100, 2);
                            }
                            allres.Add(dearr);
                        }
                        return allres;
                    }
                    else
                    {
                        var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("D") && d.Id % 25 <= 25 && d.Id % 25 > 0).Select(s => new
                        {
                            loss = s.LossRatio,
                            staid = s.StationID,
                            eqid = s.EquipID
                        }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                        List<decimal[]> allres = new List<decimal[]>();
                        foreach (var item in res)
                        {
                            int[] arr1 = new int[arr.Length];
                            foreach (var ite in item)
                            {
                                for (int i = 0; i < arr.Length - 1; i++)
                                {
                                    if (ite.loss >= (decimal)arr[i] && ite.loss < (decimal)arr[i + 1])
                                    {
                                        arr1[i]++;
                                    }
                                    else if (ite.loss >= (decimal)arr[arr.Length - 1])
                                    {
                                        arr1[arr.Length - 1]++;
                                    }
                                }
                            }
                            decimal[] dearr = new decimal[arr.Length];
                            int sum = arr1.Sum();
                            for (int i = 0; i < arr.Length; i++)
                            {
                                dearr[i] = Math.Round((decimal)arr1[i] / sum * 100, 2);
                            }
                            allres.Add(dearr);
                        }
                        return allres;
                    }
                }
            }
        }
        public object CenUpiLosspq(DateTime currtime, DateTime begtime)
        {
            var checktime = check.CheckTicks(begtime, currtime);
            //查历史表全部时间间隔内
            if (checktime[2] < 200)
            {
                int b = (int)checktime[2] / 10 * 25 - 25;
                var res = redal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.Id % b <= 25 && d.Id % b > 0).Select(s => new
                {
                    loss = s.LossRatio,
                    upi=s.UPI,
                    p=s.Outlet_P,
                    q=s.Q,
                    staid = s.StationID,
                    eqid = s.EquipID
                }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                return res;
            }
            //大于200分钟小于6000分钟100h
            else if (checktime[2] >= 200 && checktime[2] < 6000)
            {
                int b = (int)checktime[2] / 100 * 25 - 25;
                var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("F")&&d.Id % b <= 25 && d.Id % b > 0).Select(s => new
                {
                    loss = s.LossRatio,
                    upi = s.UPI,
                    p = s.Outlet_P,
                    q = s.Q,
                    staid = s.StationID,
                    eqid = s.EquipID
                }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                return res;
            }
            //大于100h 6000分钟
            else
            {
                if (checktime[1] < 2400)
                {
                    int b = (int)checktime[1] / 100;
                    if (b >= 3)
                    {
                        int c = b * 25 - 25;
                        var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("H") && d.Id % c <= 25 && d.Id % c > 0).Select(s => new
                        {
                            loss = s.LossRatio,
                            upi = s.UPI,
                            p = s.Outlet_P,
                            q = s.Q,
                            staid = s.StationID,
                            eqid = s.EquipID
                        }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                        return res;
                    }
                    else
                    {
                        var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("H") && d.Id % 25 <= 25 && d.Id % 25 > 0).Select(s => new
                        {
                            loss = s.LossRatio,
                            upi = s.UPI,
                            p = s.Outlet_P,
                            q = s.Q,
                            staid = s.StationID,
                            eqid = s.EquipID
                        }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                        return res;
                    }

                }
                //大于100天
                else
                {
                    int b = (int)checktime[0] / 100;
                    if (b >= 3)
                    {
                        int c = b * 25 - 25;
                        var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("D") && d.Id % c <= 25 && d.Id % c > 0).Select(s => new
                        {
                            loss = s.LossRatio,
                            upi = s.UPI,
                            p = s.Outlet_P,
                            q = s.Q,
                            staid = s.StationID,
                            eqid = s.EquipID
                        }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                        return res;
                    }
                    else
                    {
                        var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("D") && d.Id % 25 <= 25 && d.Id % 25 > 0).Select(s => new
                        {
                            loss = s.LossRatio,
                            upi = s.UPI,
                            p = s.Outlet_P,
                            q = s.Q,
                            staid = s.StationID,
                            eqid = s.EquipID
                        }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                        return res;
                    }
                }
            }
        }
        public object CenPEpower(DateTime currtime,DateTime begtime)
        {
            var checktime = check.CheckTicks(begtime, currtime);
            //查历史表全部时间间隔内
            if (checktime[2] < 200)
            {
                int b = (int)checktime[2] / 10 * 25-25;
                var res = redal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.Id % b <= 25 && d.Id % b > 0).Select(s => new
                {
                   epower=s.ePower,
                    p = s.Outlet_P,
                    staid = s.StationID,
                    eqid = s.EquipID
                }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                return res;
            }
            //大于200分钟取值统计分钟表
            else if(checktime[2] >= 200&&checktime[2]<6000)
            {
                int b = (int)checktime[2] / 100 * 25-25;
                var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("F") && d.Id % b <= 25 && d.Id % b > 0).Select(s => new
                {
                    epower = s.ePower,
                    p = s.Outlet_P,
                    staid = s.StationID,
                    eqid = s.EquipID
                }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                return res;
            }
            //大于6000分钟100小时
            else
            {
                if (checktime[1] < 2400)
                {
                    int b = (int)checktime[1] / 100;
                    if (b >= 3)
                    {
                        int c = b * 25-25;
                        var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("H")&&d.Id % c <= 25 && d.Id % c > 0).Select(s => new
                        {
                            epower = s.ePower,
                            p = s.Outlet_P,
                            staid = s.StationID,
                            eqid = s.EquipID
                        }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                        return res;
                    }
                    else
                    {
                        var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("H") && d.Id % 25 <= 25 && d.Id % 25>0).Select(s => new
                        {
                            epower = s.ePower,
                            p = s.Outlet_P,
                            staid = s.StationID,
                            eqid = s.EquipID
                        }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                        return res;
                    }
                   
                }
                //大于100天
                else
                {
                    int b = (int)checktime[0] / 100;
                    if (b >= 3)
                    {
                        int c = b * 25 - 25;
                        var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("D") && d.Id % c <= 25 && d.Id % c > 0).Select(s => new
                        {
                            epower = s.ePower,
                            p = s.Outlet_P,
                            staid = s.StationID,
                            eqid = s.EquipID
                        }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                        return res;
                    }
                    else
                    {
                        var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.YMDH.Equals("D") && d.Id % 25 <= 25 && d.Id % 25 > 0).Select(s => new
                        {
                            epower = s.ePower,
                            p = s.Outlet_P,
                            staid = s.StationID,
                            eqid = s.EquipID
                        }).GroupBy(g => new { g.staid, g.eqid }).ToList();
                        return res;
                    }
                }
            }
        }
        #endregion
    } 
}
