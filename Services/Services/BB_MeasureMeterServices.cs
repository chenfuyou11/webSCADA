//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using System.Linq;
    using CommonHelper;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class BB_MeasureMeterServices:BaseServices<BB_MeasureMeter>,IBB_MeasureMeterServices
    {
    	IBB_MeasureMeterRepository dal;
        IBB_AreaRepository areadal;
        IBB_FactoryRepository facdal;
        IBB_InstrumentRepository indal;
        ISB_ClientRepository clidal;
      #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
    	public BB_MeasureMeterServices(IBB_MeasureMeterRepository dal,
            IBB_AreaRepository tareadal,
             IBB_FactoryRepository tfacdal,
             IBB_InstrumentRepository tindal,
             ISB_ClientRepository tclidal)
    	{
    		this.dal = dal;
    		base.baseDal = dal;
            areadal = tareadal;
            facdal = tfacdal;
            indal = tindal;
            clidal=tclidal;
    	}
      #endregion
    
       #region 针对此表的特殊操作写在此处
           public object MeasureMeterList(int limit,int page)
        {
            var query = dal.QueryWhere().OrderBy(d => d.ID);
            var res = query.Skip((page-1)*limit).Take(limit).ToList().Select(s=>new {
                s.ID,
                s.Code,
                s.Type,
                s.Variety,
                s.MeasurementRange,
                RunYear=s.RunYear,
                CalibrationTime=s.CalibrationTime.ToString(),
                s.Manufacture,
                s.Location,
                s.InstrumentID,
                AreaID=areadal.Find(new object[] { s.AreaID }).Name,
                FactoryID = areadal.Find(new object[] { s.FactoryID }).Name,
                ClientID = areadal.Find(new object[] { s.ClientID }).Name,
                s.Remark,
                Valid=Enum.GetName(typeof(Enums.Valid),Convert.ToInt32(s.Valid)) 
            }).ToList();
            int count = query.Count();
            var tranres = new
            {
                code = 0,
                msg = "success",
                data = res,
                count
            };
            return tranres;
        } 
        public Model.BussionObject.MeasureMeterShow_BO MeasureMeterModi(int id)
        {
            var res = dal.Find(new object[] { id });
            Model.BussionObject.MeasureMeterShow_BO model = new Model.BussionObject.MeasureMeterShow_BO()
            {
                ID = id,
                InstrumentID = res.InstrumentID,
                AreaID = res.AreaID,
                CalibrationTime = res.CalibrationTime,
                ClientID = res.ClientID,
                Code = res.Code,
                FactoryID = res.FactoryID,
                Location = res.Location,
                Manufacture = res.Manufacture,
                MeasurementRange = res.MeasurementRange,
                Remark = res.Remark,
                RunYear = res.RunYear,
                Type = res.Type,
                Valid = res.Valid,
                Variety = res.Variety
            };
            return model;
        }
        public int MeasureMeterModi(Model.BussionObject.MeasureMeterShow_BO model)
        {
            Model.BB_MeasureMeter memodel = new BB_MeasureMeter()
            {
                ID = model.ID,
                InstrumentID = model.InstrumentID,
                AreaID = model.AreaID,
                CalibrationTime = model.CalibrationTime,
                ClientID = model.ClientID,
                Code = model.Code,
                FactoryID = model.FactoryID,
                Location = model.Location,
                Manufacture = model.Manufacture,
                MeasurementRange = model.MeasurementRange,
                Remark = model.Remark,
                RunYear = model.RunYear,
                Type = model.Type,
                Valid = model.Valid,
                Variety = model.Variety
            };
            dal.Update(memodel);
            var res = dal.SaveChanges();
            return res;
        }
        public int MeasureMeterAdd(Model.BussionObject.MeasureMeterShow_BO model)
        {
            Model.BB_MeasureMeter memodel = new BB_MeasureMeter()
            {
                InstrumentID = model.InstrumentID,
                AreaID = model.AreaID,
                CalibrationTime = model.CalibrationTime,
                ClientID = model.ClientID,
                Code = model.Code,
                FactoryID = model.FactoryID,
                Location = model.Location,
                Manufacture = model.Manufacture,
                MeasurementRange = model.MeasurementRange,
                Remark = model.Remark,
                RunYear = model.RunYear,
                Type = model.Type,
                Valid = model.Valid,
                Variety = model.Variety
            };
            dal.Add(memodel);
            var res = dal.SaveChanges();
            return res;
        }
        #endregion
    } 
}
