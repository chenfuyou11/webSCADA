//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using System.Linq;
    using Newtonsoft.Json;
    using CommonHelper;
    using Model.ViewObject;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class AP_Station_RealServices:BaseServices<AP_Station_Real>,IAP_Station_RealServices
    {
    	IAP_Station_RealRepository dal;
      #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
    	public AP_Station_RealServices(IAP_Station_RealRepository dal)
    	{
    		this.dal = dal;
    		base.baseDal = dal;
    	}
        #endregion

        
        #region 大数据界面空压站服务实现方法
        /// <summary>
        /// 大数据界面，空压站产气量数据
        /// </summary>
        /// <param name="currtime">当前时间</param>
        /// <param name="begtime">之前时间</param>
        /// <returns></returns>
        public object GasProSer(DateTime currtime, DateTime begtime)
        {
            var res = dal.QuerySplitPage(d => d.DateTime >= begtime && d.DateTime <= currtime, or => or.OrderByDescending(o => o.Id), 4, 1).Select(s => new
            {
                stationId = s.StationID,
                mainQ = Math.Round((decimal)s.Main_Q, 3)/1000   //单位kNm3
            }).OrderBy(o => o.stationId).ToList();
            return res;
        }
        /// <summary>
        /// 大数据界面空压站蜘蛛图数据
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <returns></returns>
        public List<decimal?[]> SprideSer(DateTime currtime, DateTime begtime)
        {

            var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime).GroupBy(g => new { g.StationID }).Select(s => new
            {
                stationId = s.Key.StationID,
                bor = 1 - Math.Round((decimal)s.Average(i => i.ReleaseRate), 2),
                dre = Math.Round((decimal)s.Average(i => i.DRE), 2),
                ere = Math.Round((decimal)s.Average(i => i.Part_Load_Ratio), 2),
                pce = Math.Round((decimal)s.Average(i => i.PCE), 2),
                tce = Math.Round((decimal)s.Average(i => i.TCE), 2),
                upi = Math.Round((decimal)s.Average(i => i.UPI)*1000, 4)
            }).ToList();
            //要传入的集合
            List<decimal?[]> list = new List<decimal?[]>();
            //放UPI的数组
            decimal?[] dearr = new decimal?[4];
            int count = 0;
            foreach (var item in res)
            {
                decimal borr = item.bor;
                decimal dree = item.dre;
                decimal eree = item.ere;
                decimal pcee = item.pce;
                decimal tcee = item.tce;
                if (borr > 1)
                {
                    borr = 1;
                }
                if (borr < 0)
                {
                    borr = 0;
                }
                if (dree > 1)
                {
                    dree = 1;
                }
                if (dree < 0)
                {
                    dree = 0;
                }
                if (eree > 1)
                {
                    eree = 1;
                }
                if (eree < 0)
                {
                    eree = 0;
                }
                if (pcee > 1)
                {
                    pcee = 1;
                }
                if (pcee < 0)
                {
                    pcee = 0;
                }
                if (tcee > 1)
                {
                    tcee = 1;
                }
                if (tcee < 0)
                {
                    tcee = 0;
                }
                decimal?[] arr = new decimal?[] { borr, eree,tcee, pcee, dree };
                list.Add(arr);
                dearr[count] = item.upi;
                count++;
            }
            list.Add(dearr);
            return list;
        }
        #endregion
        /// <summary>
        /// 
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="stationID"></param>
        /// <returns></returns>
         public List<decimal?[]> SprideSer(DateTime currtime, DateTime begtime,string stationID)
        {

            var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.StationID==stationID).GroupBy(g => new { g.StationID }).Select(s => new
            {
                bor = 1 - Math.Round((decimal)s.Average(i => i.ReleaseRate), 2),
                dre = Math.Round((decimal)s.Average(i => i.DRE), 2),
                ere = Math.Round((decimal)s.Average(i => i.Part_Load_Ratio), 2),
                pce = Math.Round((decimal)s.Average(i => i.PCE), 2),
                tce = Math.Round((decimal)s.Average(i => i.TCE), 2),
                upi = Math.Round((decimal)s.Average(i => i.UPI), 4)*1000,//单位转换
            }).ToList();
            //要传入的集合
            List<decimal?[]> list = new List<decimal?[]>();
            //放UPI的数组
            decimal?[] dearr = new decimal?[4];
            int count = 0;
            foreach (var item in res)
            {
                decimal borr = item.bor;
                decimal dree = item.dre;
                decimal eree = item.ere;
                decimal pcee = item.pce;
                decimal tcee = item.tce;
                if (borr > 1)
                {
                    borr = 1;
                }
                if (borr < 0)
                {
                    borr = 0;
                }
                if (dree > 1)
                {
                    dree = 1;
                }
                if (dree < 0)
                {
                    dree = 0;
                }
                if (eree > 1)
                {
                    eree = 1;
                }
                if (eree < 0)
                {
                    eree = 0;
                }
                if (pcee > 1)
                {
                    pcee = 1;
                }
                if (pcee < 0)
                {
                    pcee = 0;
                }
                if (tcee > 1)
                {
                    tcee = 1;
                }
                if (tcee < 0)
                {
                    tcee = 0;
                }
                decimal?[] arr = new decimal?[] { borr, eree, tcee, pcee, dree };
                list.Add(arr);
                dearr[count] = item.upi;
                count++;
            }
            list.Add(dearr);
            return list;
        }


        #region 趋势分析界面空压站服务实现方法
        /// <summary>
        /// 趋势分析界面空压站实时刷新数据
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="sta">空压站的集合id</param>
        /// <returns></returns>
        public object TrendStationAjax(DateTime currtime, DateTime begtime, List<string> sta)
        {
            var starttime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0)).Ticks;
            var listnum = sta.Count;
            var query = dal.QueryWhereDesc(d => d.DateTime >= begtime && d.DateTime <= currtime,or=>or.OrderByDescending(o=>o.Id));
            if (listnum == 1)
            {
                var res = query.Where(x => sta.Contains(x.StationID)).ToList().Select(s => new {
                    time = (DateTime.Parse(s.DateTime.ToString()).AddHours(8).Ticks - starttime) / 10000,
                    flow = s.Main_Q,
                    epower = s.ePower,
                    press = s.Main_P,
                    upi = s.UPI,
                    dre = s.DRE,
                    bor = s.ReleaseRate,
                    run = s.RUN_NUM,
                    airt = s.Air_T,
                    airh = s.Air_H,
                    dewp = s.Dewpoint,

                    s.DateTime
                }).FirstOrDefault();
                return res;
            }
            else
            {
                var res = query.Where(x => sta.Contains(x.StationID)).ToList().Select(s => new {
                    time = (DateTime.Parse(s.DateTime.ToString()).Ticks - starttime) / 10000,
                    flow = s.Main_Q,
                    epower = s.ePower,
                    press = s.Main_P,
                    upi = s.UPI,
                    dre = s.DRE,
                    bor = s.ReleaseRate,
                    run = s.RUN_NUM,
                    airt = s.Air_T,
                    airh = s.Air_H,
                    dewp = s.Dewpoint,
                    s.DateTime,
                    s.StationID
                }).GroupBy(g => g.StationID).OrderBy(ss => ss.Key).Select(s => s.FirstOrDefault()).ToList();
                return res;
            }
        }
        /// <summary>
        /// 趋势分析界面空压站所有数据
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="stastr">空压站的结合id</param>
        /// <returns></returns>
        public object TrendStation(DateTime currtime, DateTime begtime, List<string> stastr)
        {
            var starttime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0)).Ticks;
            var listnum = stastr.Count;
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            if (listnum == 1)
            {
                var res = query.Where(x => stastr.Contains(x.StationID)).ToList().Select(s => new {
                    time = (DateTime.Parse(s.DateTime.ToString()).AddHours(8).Ticks - starttime) / 10000,
                    flow = s.Main_Q,
                    epower = s.ePower,
                    press = s.Main_P,
                    upi = s.UPI,
                    dre = s.DRE,
                    bor = s.ReleaseRate,
                    run = s.RUN_NUM,
                    airt=s.Air_T,
                    airh=s.Air_H,
                    dewp=s.Dewpoint,
                    s.DateTime
                }).OrderBy(o => o.DateTime).ToList();
                return res;
            }
            else
            {
                var res = query.Where(x => stastr.Contains(x.StationID)).ToList().Select(s => new {
                    time = (DateTime.Parse(s.DateTime.ToString()).Ticks - starttime) / 10000,
                    flow = s.Main_Q,
                    epower = s.ePower,
                    press = s.Main_P,
                    upi = s.UPI,
                    dre = s.DRE,
                    bor = s.ReleaseRate,
                    run = s.RUN_NUM,
                    airt = s.Air_T,
                    airh = s.Air_H,
                    dewp = s.Dewpoint,
                    s.DateTime,
                    s.StationID
                }).OrderBy(o => o.DateTime).GroupBy(g => g.StationID).OrderBy(ss => ss.Key).ToList();
                return res;
            }

        }

        #endregion


        #region 统计分析界面空压站 服务实现方法
        /// <summary>
        /// 统计分析，空压站产气量分布图,实时表
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="arr"></param>
        /// <param name="sid"></param>
        /// <returns></returns>
        public object StaProduce(DateTime currtime, DateTime begtime, string sid)
        {
            var tranres = new object();
            List<decimal[]> alllist = new List<decimal[]>();
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
                query = query.Where(d => d.Id % 8 <= 4 && d.Id % 8 > 0);
            var res = query.Where(x => x.StationID == sid).Select(s => new
            {
                staid = s.StationID,
                mainq = s.Main_Q
            }).GroupBy(g => g.staid).ToList();//当前空压站的产气量
            foreach (var item in res)
            {
                int Max = (int)item.Max(r => r.mainq);
                int Min = (int)item.Min(r => r.mainq);
                string MaxStr = (Convert.ToInt32(Max.ToString().Substring(0, 2))).ToString();
                string MinStr = (Convert.ToInt32(Min.ToString().Substring(0, 2))).ToString();
                for (int i = 0; i < Max.ToString().Length - 2; i++)
                {
                    MaxStr += "0";
                }
                for (int i = 0; i < Min.ToString().Length - 2; i++)
                {
                    MinStr += "0";
                }
                int MaxInt = Convert.ToInt32(MaxStr);
                int MinInt = Convert.ToInt32(MinStr);
                int Dvalue = MaxInt - MinInt;
                int Divide = Dvalue / 10;
                int Count = 0;
                List<int> testarr = new List<int>();
                for (int i = 0; i < 20; i++)
                {
                    int test = MinInt + i * Divide;
                    testarr.Add(test);
                    if (test >= Max)
                    {
                        Count = i;
                        break;
                    }
                }
                int[] arr1 = new int[testarr.Count];
                foreach (var it in item)
                {
                    for (int i = 0; i < arr1.Length - 1; i++)
                    {
                        if (it.mainq >= testarr[i] && it.mainq < testarr[i + 1])
                        {
                            arr1[i]++;
                        }
                        else if (it.mainq >= testarr[testarr.Count - 1])
                        {
                            arr1[arr1.Length - 1]++;
                        }
                    }
                }
                double[] dearr = new double[arr1.Length];
                double sum = arr1.Sum();
                for (int i = 0; i < arr1.Length; i++)
                {
                    dearr[i] = Math.Round(arr1[i] / sum * 100, 2);
                }
                tranres = new
                {
                    a = dearr,
                    x = testarr,
                    ca = Divide
                };
            }
            return tranres;
        }
        /// <summary>
        /// 统计分析，空压站upi和放散率散点图，实时表
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="sid"></param>
        /// <returns></returns>
        public object StaUpiLossMainpq(DateTime currtime, DateTime begtime, string sid)
        {
                var res = dal.QueryWhere(d => d.StationID == sid && d.DateTime >= begtime && d.DateTime <= currtime&&d.Id%8<=4&&d.Id%8>0).Select(s => new
                {
                    staid = s.StationID,
                    upi = s.UPI,
                    loss = s.ReleaseRate * 100 < 0 ? 0 :s.ReleaseRate*100,
                    s.Id
                }).ToList();
            return res;
            }
        /// <summary>
        /// 统计分析，空压站放散率分布图，实时表
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="arr"></param>
        /// <param name="sid"></param>
        /// <returns></returns>
        public object StaLoss(DateTime currtime, DateTime begtime, double[] arr, string sid)
        {
            List<decimal[]> alllist = new List<decimal[]>();
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
                query = query.Where(x => x.Id % 8 <= 4 && x.Id % 8 > 0 && x.StationID.Equals(sid));
            var res = query.Select(s => new
            {
                loss = s.ReleaseRate * 100
            }).ToList();
            //最大值
            double Max = (double)res.Max(r => r.loss);
            //最小值
            double Min = (double)res.Min(r => r.loss);
            if (Min < 0)
            {
                Min = 0;
            }
            //分成10份差值
            double Dvalue = (Max - Min) / 10;
            string str = "" + Dvalue;
            string[] strarr = str.Split(new char[] { '.' });
            //小数点后位数
            int slength = strarr[1].Length;
            int MinInt = (int)Min;
            int Count = 0;
            List<double> douarr = new List<double>();
            for (int i = 0; i < 20; i++)
            {
                double listvalue = Math.Round(MinInt + i * Dvalue, slength);
                douarr.Add(listvalue);
                if (listvalue >= Max)
                {
                    Count = i;
                    break;
                }
            }
            int[] arr1 = new int[douarr.Count];
            foreach (var ii in res)
            {
                for (var i = 0; i < arr1.Length - 1; i++)
                {
                    if (ii.loss < (decimal)douarr[i + 1] && ii.loss >= (decimal)douarr[i])
                    {
                        arr1[i]++;
                    }
                    else if (ii.loss >= (decimal)douarr[arr1.Length - 1])
                    {
                        arr1[arr1.Length - 1]++;
                    }
                }
            }
            decimal[] dearr = new decimal[arr1.Length];
            var aa = arr1.Sum();
            for (var i = 0; i < arr1.Length; i++)
            {
                if (aa > 0)
                {
                    dearr[i] = Math.Round((decimal)arr1[i] / aa * 100, 2);
                }
                else
                {
                    dearr[i] = 0;
                }
            }
            return new
            {
                a = dearr,
                x = douarr,
                ca = Dvalue,
                l = slength
            };
        }
        /// <summary>
        /// 统计分析，空压站产气量功率图，实时表
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="sid"></param>
        /// <returns></returns>
        public object StaProduceEpower(DateTime currtime, DateTime begtime, string sid)
        {
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.StationID.Equals(sid));
                query = query.Where(x => x.Id % 8 <= 4 && x.Id % 8 > 0);
            var res = query.Select(s => new
            {
                flow = s.Main_Q,
                epwoer = s.ePower
            }).ToList();
            return res;
        }
        #endregion

        #region 优化指导界面服务实现方法
        /// <summary>
        /// 计算空压站内开机台数和总开机台数
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <returns></returns>
        public List<int> CentriRun_Number(DateTime currtime,DateTime begtime)
        {
            var res = dal.QuerySplitPage(d => d.DateTime >= begtime && d.DateTime <= currtime, or => or.OrderByDescending(o => o.Id), 4, 1).Select(s => new
            {
                s.RUN_NUM,
                s.StationID,
                s.REQ_NUM
            }).OrderBy(o=>o.StationID).ToList();
            List<int> Runint = new List<int>();
            int Sum = 0;
            foreach(var item in res)
            {
                Runint.Add((int)item.RUN_NUM);
                Sum += (int)item.RUN_NUM;
                Runint.Add((int)item.REQ_NUM);
            }
            Runint.Add(Sum);
            return Runint;
        }
        #endregion
    }
}
