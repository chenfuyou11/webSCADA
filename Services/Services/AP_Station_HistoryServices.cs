//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using CommonHelper;
    using System.Linq;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class AP_Station_HistoryServices : BaseServices<AP_Station_History>, IAP_Station_HistoryServices
    {
        IAP_Station_HistoryRepository dal;
        IBB_ThresholdRepository thresholdal;
        private TimeCheck check;
        #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
        public AP_Station_HistoryServices(IAP_Station_HistoryRepository dal,IBB_ThresholdRepository thdal)
        {
            this.dal = dal;
            base.baseDal = dal;
            check = new TimeCheck();
            thresholdal = thdal;
        }
        #endregion

        #region 针对此表的特殊操作写在此处
        public object StaProduce(DateTime currtime, DateTime begtime, int[] arr,string sid)
        {
            var checktime = check.CheckTicks(begtime, currtime);
            var tranres = new object();
            List<decimal[]> alllist = new List<decimal[]>();
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            if (checktime[1] <= 24)
            {
                query = query.Where(d => d.Id % 8 <= 4 && d.Id % 8 > 0);
            }
            else
            {
                int b = (int)checktime[1] / 12 * 4;
                query = query.Where(d => d.Id % b <= 4 && d.Id % b > 0);
            }
            var res = query.Where(x=>x.StationID==sid).Select(s => new
            {
                staid = s.StationID,
                mainq = s.Main_Q
            }).GroupBy(g => g.staid).ToList();
            foreach (var item in res)
            {
                int Max = (int)item.Max(r => r.mainq);
                int Min = (int)item.Min(r => r.mainq);
                string MaxStr = (Convert.ToInt32(Max.ToString().Substring(0, 2))).ToString();
                string MinStr = (Convert.ToInt32(Min.ToString().Substring(0, 2))).ToString();
                for (int i = 0; i < Max.ToString().Length - 2; i++)
                {
                    MaxStr += "0";
                }
                for (int i = 0; i < Min.ToString().Length - 2; i++)
                {
                    MinStr += "0";
                }
                int MaxInt = Convert.ToInt32(MaxStr);
                int MinInt = Convert.ToInt32(MinStr);
                int Dvalue = MaxInt - MinInt;
                int Divide = Dvalue / 10;
                int Count = 0;
                List<int> testarr = new List<int>();
                for (int i = 0; i < 20; i++)
                {
                    int test = MinInt + i * Divide;
                    testarr.Add(test);
                    if (test >= Max)
                    {
                        Count = i;
                        break;
                    }
                }
                int[] arr1 = new int[testarr.Count];
                foreach (var it in item)
                {
                    for (int i = 0; i < arr1.Length-1; i++)
                    {
                        if (it.mainq >= testarr[i] && it.mainq < testarr[i + 1])
                        {
                            arr1[i]++;
                        }
                        else if (it.mainq >= testarr[testarr.Count - 1])
                        {
                            arr1[arr1.Length - 1]++;
                        }
                    }
                }
                double[] dearr = new double[arr1.Length];
                double sum = arr1.Sum();
                for (int i = 0; i < arr1.Length; i++)
                {
                    dearr[i] = Math.Round(arr1[i] / sum * 100, 2);
                }
                double dsum = (double)dearr.Sum();
                tranres = new
                {
                    a = dearr,
                    x = testarr,
                    ca = Divide
                };
            }
            return tranres;
        }
        public object StaMainpq(DateTime currtime, DateTime begtime,string sid)
        {
            var checktime = check.CheckTicks(currtime, begtime);
            if (checktime[1] < 24)
            {
                var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime).Select(s => new
                {
                   mainp=s.Main_P,
                   mainq=s.ePower,
                    staid = s.StationID
                }).GroupBy(g => g.staid).ToList();
                return res;
            }
            else
            {
                int b = (int)checktime[1] / 12 * 4*2*2;
                var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime && d.Id % b <= 4 && d.Id % b > 0).Select(s => new
                {
                    mainp = s.Main_P,
                    mainq = s.ePower,
                    staid = s.StationID
                }).GroupBy(g => g.staid).ToList();
                return res;
            }
        }
        public object StaUpiLossMainpq(DateTime currtime, DateTime begtime,string sid)
        {
            var checktime = check.CheckTicks(currtime, begtime);
            if (checktime[1] <=24)
            {
                
                var res = dal.QueryWhere(d =>d.StationID==sid&&d.DateTime >= begtime && d.DateTime <= currtime && d.Id %8<= 4 && d.Id % 8> 0).Select(s => new
                {
                    staid = s.StationID,
                    upi = s.UPI,
                    loss = s.ReleaseRate*100,
                }).ToList();
                return res;
            }
           else
            {
                int b = (int)checktime[1] / 12 *4;
                var res = dal.QueryWhere(d=>d.StationID==sid&&d.DateTime >= begtime && d.DateTime <= currtime && d.Id % b <= 4 && d.Id % b > 0).Select(s => new
                {
                    staid = s.StationID,
                    upi = s.UPI,
                    loss = s.ReleaseRate*100,
                }).ToList();
                return res;
            }
        }
        public object StaLoss(DateTime currtime, DateTime begtime, double[] arr,string sid)
        {
            var checktime = check.CheckTicks(currtime, begtime);
            List<decimal[]> alllist = new List<decimal[]>();
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            if (checktime[1] <= 24)
            {
                query = query.Where(x => x.Id % 8 <= 4 && x.Id % 8 > 0 && x.StationID.Equals(sid));
            }
            else
            {
                int b = (int)checktime[1] / 12 * 4;
                query = query.Where(x => x.Id % b <= 4 && x.Id % b > 0 && x.StationID.Equals(sid));
            }
            var res = query.Select(s => new
            {
                loss = s.ReleaseRate * 100
            }).ToList();
            //最大值
            double Max = (double)res.Max(r => r.loss);
            //最小值
            double Min = (double)res.Min(r => r.loss);
            //分成10份差值
            double Dvalue = (Max - Min) / 10;
            string str = "" + Dvalue;
            string[] strarr = str.Split(new char[] { '.' });
            //小数点后位数
            int slength = strarr[1].Length;
            int MinInt = (int)Min;
            int Count = 0;
            List<double> douarr = new List<double>();
            for (int i = 0; i < 20; i++)
            {
                double listvalue = Math.Round(MinInt + i * Dvalue, slength);
                douarr.Add(listvalue);
                if (listvalue >= Max)
                {
                    Count = i;
                    break;
                }
            }
            int[] arr1 = new int[douarr.Count];
                foreach (var ii in res)
                {
                    for (var i = 0; i < arr1.Length-1; i++)
                    {
                        if (ii.loss < (decimal)douarr[i + 1] && ii.loss >= (decimal)douarr[i])
                        {
                            arr1[i]++;
                        }
                        else if (ii.loss >= (decimal)douarr[arr1.Length - 1])
                        {
                            arr1[arr1.Length - 1]++;
                        }
                    }
                }
                decimal[] dearr = new decimal[arr1.Length];
                var aa = arr1.Sum();
                for (var i = 0; i < arr1.Length; i++)
                {
                    if (aa > 0)
                    {
                        dearr[i] = Math.Round((decimal)arr1[i] / aa * 100, 2);
                    }
                    else
                    {
                        dearr[i] = 0;
                    }
                }
            return new {
                a=dearr,
                x=douarr,
                ca=Dvalue,
                l=slength
            };
            }
        public object GasProSer(DateTime currtime, DateTime begtime)
        {
            var res = dal.QuerySplitPage(d => d.DateTime >= begtime && d.DateTime <= currtime,or=>or.OrderByDescending(o=>o.Id),4,1).Select(s=>new 
            {
                stationId = s.StationID,
                mainQ = Math.Round((decimal)s.Main_Q, 3)
            }).OrderBy(o=>o.stationId).ToList();
            return res;
        }
        public List<decimal?[]> SprideSer(DateTime currtime, DateTime begtime)
        {

            var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime).GroupBy(g => new { g.StationID }).Select(s => new
            {
                stationId = s.Key.StationID,
                bor = 1-Math.Round((decimal)s.Average(i=>i.ReleaseRate),2),
                dre = Math.Round((decimal)s.Average(i => i.DRE)- (decimal)0.20, 2),
                ere = Math.Round((decimal)s.Average(i => i.ERE)- (decimal)0.20, 2),
                pce = (decimal)0.92,
                tce= (decimal)0.95,
                upi = Math.Round((decimal)s.Average(i => i.UPI), 4)
            }).ToList();
            List<decimal?[]> list = new List<decimal?[]>();
            decimal?[] dearr = new decimal?[4];
            int count = 0;
            foreach (var item in res)
            {
                decimal?[] arr = new decimal?[] { item.bor,item.ere, item.tce, item.pce, item.dre };
                list.Add(arr);
                dearr[count] = item.upi;
                count++;
            }
            list.Add(dearr);
            return list;
        }
        //重载上个函数
        public List<decimal?[]> SprideSer(DateTime currtime,DateTime begtime,string stationId)
        {
            var res = dal.QueryWhere(d =>d.StationID==stationId && d.DateTime >= begtime && d.DateTime <= currtime).GroupBy(g => new { g.StationID }).Select(s => new
            {
                stationId = s.Key.StationID,
                bor = Math.Round((decimal)s.Average(i => i.ReleaseRate), 2),
                dre = Math.Round((decimal)s.Average(i => i.DRE) - (decimal)0.20, 2),
                ere = Math.Round((decimal)s.Average(i => i.ERE) - (decimal)0.20, 2),
                pce = (decimal)0.92,
                tce = (decimal)0.95,
                upi = Math.Round((decimal)s.Average(i => i.UPI), 4)
            }).ToList();
            List<decimal?[]> list = new List<decimal?[]>();
            decimal?[] dearr = new decimal?[4];
            int count = 0;
            foreach (var item in res)
            {
                decimal?[] arr = new decimal?[] { item.bor, item.ere, item.tce, item.pce, item.dre };
                list.Add(arr);
                dearr[count] = item.upi;
                count++;
            }
            list.Add(dearr);
            return list;
        }
        public List<List<Model.ViewObject.Supply_View>> StaTrendReal(DateTime currtime, DateTime begtime)
        {
            var starttime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0)).Ticks;
            var res = dal.QuerySplitPage(d => d.DateTime >= begtime && d.DateTime <= currtime, or => or.OrderByDescending(o => o.Id), 200, 1).Select(s => new {
                time = s.DateTime,
                epower = s.ePower,
                upi = s.UPI,
                staid = s.StationID
            }).GroupBy(g => g.staid).ToList();
            List<List<Model.ViewObject.Supply_View>> allmodel = new List<List<Model.ViewObject.Supply_View>>();
            foreach (var item in res)
            {
                List<Model.ViewObject.Supply_View> model = new List<Model.ViewObject.Supply_View>();
                foreach (var it in item.OrderBy(o => o.time))
                {
                    var timetick = (DateTime.Parse("" + it.time).AddHours(8).Ticks - starttime) / 10000;
                    Model.ViewObject.Supply_View list = new Model.ViewObject.Supply_View()
                    {
                        time = timetick,
                        usef = it.epower,//电量
                        main = it.upi,//单耗
                        dtime = it.time.ToString()
                    };
                    model.Add(list);
                }
                allmodel.Add(model);
            }
            return allmodel;
        }
        public object TrendStationAjax(DateTime currtime, DateTime begtime,List<string> sta)
        {
            var starttime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0)).Ticks;
            var listnum = sta.Count;
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            if (listnum == 1)
            {
                var res = query.Where(x => sta.Contains(x.StationID)).ToList().Select(s => new {
                    time = (DateTime.Parse(s.DateTime.ToString()).AddHours(8).Ticks - starttime) / 10000,
                    flow = s.Main_Q,
                    epower = s.ePower,
                    press = s.Main_P,
                    upi = s.UPI,
                    dre = s.DRE,
                    bor = s.ReleaseRate,
                    run = s.RUN_NUM,
                    ere = s.ERE,
                    airt = s.Air_T,
                    airh = s.Air_H,
                    dewpoint = s.Dewpoint,
                    s.DateTime
                }).FirstOrDefault();
                return res;
            }
            else
            {
                var res = query.Where(x => sta.Contains(x.StationID)).ToList().Select(s => new {
                    time = (DateTime.Parse(s.DateTime.ToString()).Ticks - starttime) / 10000,
                    flow = s.Main_Q,
                    epower = s.ePower,
                    press = s.Main_P,
                    upi = s.UPI,
                    dre = s.DRE,
                    bor = s.ReleaseRate,
                    run = s.RUN_NUM,
                    ere = s.ERE,
                    airt = s.Air_T,
                    airh = s.Air_H,
                    dewpoint = s.Dewpoint,
                    s.DateTime,
                    s.StationID
                }).GroupBy(g => g.StationID).OrderBy(ss => ss.Key).Select(s=>s.FirstOrDefault()).ToList();
                return res;
            }
        }
        public object TrendStation(DateTime currtime, DateTime begtime,List<string> stastr)
        {
            var starttime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0)).Ticks;
            var listnum = stastr.Count;
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            if (listnum == 1)
            {
                var res = query.Where(x => stastr.Contains(x.StationID)).ToList().Select(s=>new {
                    time=(DateTime.Parse(s.DateTime.ToString()).AddHours(8).Ticks-starttime)/10000,
                    flow=s.Main_Q,
                    epower=s.ePower,
                    press=s.Main_P,
                    upi=s.UPI,
                    dre=s.DRE,
                    bor=s.ReleaseRate,
                    run=s.RUN_NUM,
                    ere=s.ERE,
                    airt=s.Air_T,
                    airh=s.Air_H,
                    dewpoint=s.Dewpoint,
                    s.DateTime
                }).OrderBy(o=>o.DateTime).ToList();
                return res;
            }
            else 
            {
               var res = query.Where(x => stastr.Contains(x.StationID)).ToList().Select(s=>new {
                   time = (DateTime.Parse(s.DateTime.ToString()).Ticks - starttime) / 10000,
                   flow = s.Main_Q,
                   epower = s.ePower,
                   press = s.Main_P,
                   upi = s.UPI,
                   dre = s.DRE,
                   bor = s.ReleaseRate,
                   run = s.RUN_NUM,
                   ere = s.ERE,
                   s.DateTime,
                   airt = s.Air_T,
                   airh = s.Air_H,
                   dewpoint = s.Dewpoint,
                   s.StationID
               }).OrderBy(o=>o.DateTime).GroupBy(g=>g.StationID).OrderBy(ss=>ss.Key).ToList();
                return res;
            }
       
        }
        public object SysEnergyAnalsys(DateTime currtime,DateTime begtime)
        {
            //找到每个空压站的最大和最小流量
          var res=  dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime).GroupBy(g => g.StationID).Select(s => new
            {
                Maxvalue = s.Max(i => i.Main_Q),
                Minvalue = s.Min(i => i.Main_Q),
                sta=s.Key
            }).ToList();
            //获取缓存对象，任何阈值设定界面值的修改，都要缓存当前
            List<BB_Threshold> cacheThre = CacheMgr.GetData<List<BB_Threshold>>("threshold");
            //判断是否有缓存存在，不存在重新设置
            if (cacheThre == null)
            {
                List<BB_Threshold> threshold = thresholdal.QueryWhere().ToList();
                CacheMgr.SetData("threshold", threshold);
                cacheThre = threshold;
            }
            //目标压力
            decimal setPress =(decimal) cacheThre.Where(x=>x.Name.Equals("管网压力设定")).FirstOrDefault().CurrentValue;
            //设定间隔
            decimal intval = (decimal)cacheThre.Where(x => x.Name.Equals("管网压力设定间隔")).FirstOrDefault().CurrentValue;
            List<List<decimal>> dvalue = new List<List<decimal>>();
            List<List<decimal>> setdvalue = new List<List<decimal>>();
            foreach (var item in res)
            {
                decimal max =(decimal)item.Maxvalue / 15000;
                int imax = (int)max + 1;//最大开机数
                decimal min = (decimal)item.Minvalue / 15000;
                int imin = (int)min;//最小开机数
                if (item.sta == "S004")
                {
                    if (imax > 7)
                    {
                        imax = 7;
                    }
                }
                else
                {
                    if (imax > 6)
                    {
                        imax = 6;
                    }
                }
                int n = imax - imin;//开机数差
                List<decimal> press = new List<decimal>();//压力设定集合
                List<decimal> value = new List<decimal>();//空压机集合
                decimal countvalue =setPress + intval * n;//基础压力设定值
                #region 空压机填充
                for (int i = 0; i < imin; i++)
                {
                    value.Add(countvalue);
                    value.Add(0);
                    value.Add(0);
                    value.Add(0);
                }
                for(int i = 0; i < n; i++)
                {
                    if (i == 0)
                    {
                        value.Add(0);
                        value.Add(countvalue - intval * (i + 1));
                        value.Add(0);
                        value.Add(0);
                    }
                    else if (i == 1)
                    {
                        value.Add(0);
                        value.Add(0);
                        value.Add(countvalue - intval * (i + 1));
                        value.Add(0);
                    }
                    else
                    {
                        for(int j = 0; j < n - 2; j++)
                        {
                            value.Add(0);
                            value.Add(0);
                            value.Add(0);
                            value.Add(countvalue - intval * (i + 1));
                        }
                    }
                }
                #endregion
                press.Add(countvalue);
                //压力设定填充
                for(int i = 0; i < n; i++)
                {
                    press.Add((countvalue - intval * (i + 1)));
                }
                if (press.Count() < 4)
                {
                    press.Add(0);
                }
                setdvalue.Add(press);
                if (item.sta == "S004")
                {
                    if (value.Count() < 28)
                    {
                        int vcount = value.Count();
                        decimal one = value[vcount - 4];
                        decimal two = value[vcount - 3];
                        decimal three = value[vcount - 2];
                        decimal four = value[vcount - 1];
                        for(int i = 0; i < (28 - vcount) / 4; i++)
                        {
                            value.Add(one);
                            value.Add(two);
                            value.Add(three);
                            value.Add(four);
                        }
                    }
                }
                else
                {
                    if (value.Count() < 24)
                    {
                        int vcount = value.Count();
                        decimal one = value[vcount - 4];
                        decimal two = value[vcount - 3];
                        decimal three = value[vcount - 2];
                        decimal four = value[vcount - 1];
                        for (int i = 0; i < (24 - vcount) / 4; i++)
                        {
                            value.Add(one);
                            value.Add(two);
                            value.Add(three);
                            value.Add(four);
                        }
                    }
                }
                dvalue.Add(value);
            }
            var tranres = new
            {
                disarr = setdvalue,
                arr = dvalue
            };
            return tranres;
        }
        public object StaProduceEpower(DateTime currtime, DateTime begtime, string sid)
        {
            var checktime = check.CheckTicks(currtime, begtime);
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime&&d.StationID.Equals(sid));
            if (checktime[1] <= 24)
            {
                query = query.Where(x => x.Id % 8 <= 4 && x.Id % 8 > 0);
            }
            else
            {
                int dd = (int)checktime[1] / 12 * 4;
                query = query.Where(x => x.Id % dd <= 4 && x.Id % dd > 0);
            }
            var res = query.Select(s => new
            {
                flow = s.Main_Q,
                epwoer = s.ePower
            }).ToList();
            return res;
        }
        #endregion
    } 
}
