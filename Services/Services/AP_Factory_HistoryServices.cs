//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using System.Linq;
    using Newtonsoft.Json;
    using CommonHelper;
    using System.Data.SqlClient;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class AP_Factory_HistoryServices:BaseServices<AP_Factory_History>,IAP_Factory_HistoryServices
    {
    	IAP_Factory_HistoryRepository dal;
        private TimeCheck check;
      #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
    	public AP_Factory_HistoryServices(IAP_Factory_HistoryRepository dal)
    	{
    		this.dal = dal;
    		base.baseDal = dal;
            check = new TimeCheck();
    	}
        #endregion

        #region 针对此表的特殊操作写在此处
        public object Test(DateTime currtime, DateTime begtime)

        {
            string sql = "select * from AP_Factory_History where DateTime>='"+begtime+"'and DateTime<='"+currtime+"'";
            return dal.QueryNoParams(sql).Select(s=>new {s.DateTime,s.DayID,s.DRE}).ToList();
        }
        public List<AP_Factory_History> Testt(DateTime currtime, DateTime begtime)
        {
            string sql = "select * from AP_Factory_History where DateTime>='" + begtime + "'and DateTime<='" + currtime + "'and Id =@id";
            SqlParameter[] paras ={

                           new SqlParameter("@id","66804"),
                          };
            var res = dal.QueryParams(sql, paras).ToList();
            return res;
        }
        public List<AP_Factory_History> Test1(DateTime  currtime,DateTime begtime)
        {
            return dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime).ToList();
        }
        /// <summary>
        /// 本月累计工厂总流量
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <returns></returns>
        public decimal? SumFactoryFlowSer(DateTime currtime, DateTime begtime)
        {
            var mouthres = dal.QueryWhere(f => f.DateTime <= currtime && f.DateTime >= begtime).Select(f => new
            {
                ProduceFlowCentrifuge = f.ProduceFlowCentrifuge
            }).Sum(p => p.ProduceFlowCentrifuge);
            return mouthres;
        }
        public int ttt() {
          var res=  dal.QueryWhere().ToList();
            return 1;
        }
        public object MomentSer(DateTime currtime, DateTime begtime, DateTime monthtime)
        {
            var res = dal.QuerySplitPage(f => f.DateTime >= begtime && f.DateTime <= currtime, or => or.OrderByDescending(o => o.DateTime), 1, 1).FirstOrDefault();
            var Sumres = dal.QueryWhere(h => h.DateTime >= monthtime && h.DateTime <= currtime).Sum(s => s.ProduceFlowCentrifuge);
            var supply = new
            {
                f1 = res.SumPower,
                f2 = res.ProduceFlowCentrifuge,
                f3 = res.UPI,
                f4 = res.PipelinePressure,
                f5 = Sumres/600
            };

            return supply;
        }
        /// <summary>
        /// upi放散率散点图
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <returns></returns>
        public object ScatterSer(DateTime currtime, DateTime begtime)
        {
            var res = dal.QueryWhere(f => f.DateTime >= begtime && f.DateTime <= currtime).Select(s => new {
                uPI = s.UPI,
                lossRatio = s.LossRatio
            }).ToList();
            return res;
        }
        /// <summary>
        /// 放散率分布图
        /// </summary>
        /// <param name="currtime"></param>
        /// <param name="begtime"></param>
        /// <param name="jsonList"></param>
        /// <returns></returns>
        public List<decimal> FrequencySer(DateTime currtime, DateTime begtime, double[] jsonList)
        {
            var res = dal.QueryWhere(f => f.DateTime >= begtime && f.DateTime <= currtime).Select(s=>new {
                loss = s.LossRatio,
            }).ToList();
            int[] arr = new int[jsonList.Length];
            for (int i = 0; i < jsonList.Length - 1; i++)
            {
                foreach (var item in res)
                {

                    if ((decimal)jsonList[i] <= item.loss && item.loss < (decimal)jsonList[i + 1])
                    {
                        arr[i]++;
                    }
                    else if (item.loss >= (decimal)jsonList[jsonList.Length - 1])
                    {
                        arr[jsonList.Length - 1]++;
                    }
                }
            }
            List<decimal> arr2 = new List<decimal>();
            for (int i = 0; i < arr.Length; i++)
            {
                if (arr.Sum() != 0)
                {
                    arr2.Add(Math.Round((decimal)arr[i] / arr.Sum() * 100, 2));
                }
                else
                {
                    arr2.Add(0);
                }
            }
            return arr2;
        }
        public Model.ViewObject.SupplyStackSumpowerpq_VO SupplySer(DateTime currtime, DateTime begtime)
        {
            var res = dal.QueryWhere(f => f.DateTime >= begtime && f.DateTime <= currtime).OrderByDescending(o=>o.Id).Select(f => new
            {
                time = f.DateTime,
                mustnum = f.ProduceFlowCentrifuge / 15000,
                runnum = f.RUN_NUM,
            }).FirstOrDefault();
            DateTime StartTime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0));
            long timezone = StartTime.Ticks;
            var trantimezone = (DateTime.Parse("" + res.time).AddHours(8).Ticks - timezone) / 10000;
            Model.ViewObject.SupplyStackSumpowerpq_VO list = new Model.ViewObject.SupplyStackSumpowerpq_VO()
            {
                time = trantimezone,
                dtime = res.time.ToString(),
                Mustnum = Math.Round((decimal)res.mustnum, 2),
                Runnum = Convert.ToInt32(res.runnum),
            };
            return list;
        }
        public List<Model.ViewObject.SupplyStackSumpowerpq_VO> SupplyStackSumPowerpq (DateTime currtime, DateTime begtime)
        {
            var res = dal.QueryWhere(f => f.DateTime >= begtime && f.DateTime <= currtime).Select(f => new
            {
                time = f.DateTime,
                mustnum =Math.Round((double)f.ProduceFlowCentrifuge / 15000*1.1,1),
                runnum=f.RUN_NUM,
                flow=Math.Round(f.ProduceFlowStation.Value/1000,2),
                press=f.PipelinePressure,
                sumpower=f.SumPower
            }).ToList();
            DateTime StartTime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0));
            long timezone = StartTime.Ticks;
            List<Model.ViewObject.SupplyStackSumpowerpq_VO> alllist = new List<Model.ViewObject.SupplyStackSumpowerpq_VO>();
            foreach (var item in res)
            {
                //转换成时间戳到秒
                var trantimezone = (DateTime.Parse("" + item.time).AddHours(8).Ticks - timezone) / 10000;
                Model.ViewObject.SupplyStackSumpowerpq_VO list = new Model.ViewObject.SupplyStackSumpowerpq_VO()
                {
                    time = trantimezone,
                    dtime = item.time.ToString(),
                    Mustnum=Math.Round((decimal)item.mustnum,2),
                    Runnum=Convert.ToInt32(item.runnum),
                    Power=Convert.ToInt32(item.sumpower),
                    ProduceStation=Convert.ToInt32(item.flow),
                    Press=(decimal)item.press
                };
                alllist.Add(list);
            }

            return alllist;
        }
        public Model.ModelViews.ShowView TrendPowerUpi(DateTime currtime,DateTime begtime)
        {
           var res= dal.QueryWhere(f => f.DateTime >= begtime && f.DateTime <= currtime).Select(s => new
            {
                time = s.DateTime,
                power = s.SumPower,
                upi=s.UPI
            }).ToList();
            Model.ModelViews.ShowView viewstr = new Model.ModelViews.ShowView();
            viewstr.str = JsonConvert.SerializeObject(res);
            viewstr.time = currtime.ToString("yyyy-MM-dd HH:mm:ss");
            viewstr.time1 = begtime.ToString("yyyy-MM-dd HH:mm:ss");
            return viewstr;
        }
        public object Produceflow(DateTime currtime, DateTime begtime,int a)
        {
            int[] testarr = new int[15];
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            if (a <= 24)
            {
                query = query.Where(x => x.Id % 2 == 1);
            }
          else
            {
                int b = a / 12;
                query = query.Where(x => x.Id % b == 1);
            }
            var res = query.Select(s => new
            {
                p = s.ProduceFlowStation
                ,t=s.DateTime
            }).ToList();
            int Max = (int)res.Max(r=>r.p);
            int Min = (int)res.Min(r => r.p);
            string MaxStr = (Convert.ToInt32(Max.ToString().Substring(0, 2))).ToString();
            string MinStr = (Convert.ToInt32(Min.ToString().Substring(0, 2))).ToString();
            for (int i = 0; i < Max.ToString().Length-2; i++)
            {
                MaxStr += "0";
            }
            for(int i = 0; i < Min.ToString().Length-2; i++)
            {
                MinStr += "0";
            }
            int MaxInt = Convert.ToInt32(MaxStr);
            int MinInt = Convert.ToInt32(MinStr);
            int Dvalue = MaxInt - MinInt;
            int Divide = Dvalue / 10;
            int Count = 0;
            for(int i=0;i< testarr.Length; i++)
            {
                testarr[i] = MinInt + i * Divide;
                if (testarr[i]>= Max)
                {
                    Count = i;
                    break;
                }
            }
            int Counta = Count + 1;
            int[] arr=new int[Counta];
            int[] arr1 = new int[Counta];
            for (int i = 0; i < arr.Length; i++)
            {
                arr[i] = testarr[i];
            }
            for (int i = 0; i < arr.Length - 1; i++)
            {
                foreach (var item in res)
                {
                    if (item.p <= arr[i + 1] && item.p >= arr[i])
                    {
                        arr1[i]++;
                    }
                    else if (item.p > arr[arr.Length - 1])
                    {
                        arr1[arr.Length - 1]++;
                    }
                }
            }
            decimal[] arr2 = new decimal[arr.Length];
            var bb = arr1.Sum();

            for (int i = 0; i < arr1.Length; i++)
            {
                if (bb != 0)
                {
                    var c = arr1[i];
                    var d = Math.Round((decimal)c / bb * 100, 2);

                    arr2[i] = d;
                }
                else
                {
                    arr2[i] = 0;
                }
            }
            var tranres = new
            {
                a = arr2,
                x = testarr,
                ca= Divide
            };
            return tranres;
        }
        public object ScatterSer(DateTime currtime, DateTime begtime,int a)
        {
            if (a <= 24)
            {
                var res = dal.QueryWhere(f => f.DateTime >= begtime && f.DateTime <= currtime&&f.Id%2==1).Select(s => new {
                    uPI = s.UPI,
                    lossRatio = s.LossRatio
                }).ToList();
                return res;
            }
            else
            {
                int b = a / 12;
                var res = dal.QueryWhere(f => f.DateTime >= begtime && f.DateTime <= currtime&&f.Id%b==1).Select(s => new {
                    uPI = s.UPI,
                    lossRatio = s.LossRatio
                }).ToList();
                return res;
            }
            
        }
        public double PressDesignUPISer(DateTime currtime, DateTime begtime, int a)
        {
            if (a <= 24)
            {
                var res = dal.QueryWhere(f => f.DateTime >= begtime && f.DateTime <= currtime && f.Id % 2 == 0).Average(x => x.UPI);
                return Math.Round((double)res,4);
            }
            else
            {
                int b = a / 12;
                var res = dal.QueryWhere(f => f.DateTime >= begtime && f.DateTime <= currtime && f.Id % b == 0).Average(x=>x.UPI);
                return Math.Round((double)res, 4);
            }

        }
        public object LossSer(DateTime currtime, DateTime begtime,double[] arr)
        {
            var checktime = check.CheckTicks(begtime, currtime);
            
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            if (checktime[1] <= 24)
            {
                query = query.Where(x => x.Id % 2 == 1);
            }
            else
            {
                int b = (int)checktime[1] / 12;
                query = query.Where(x => x.Id % b ==1);

            }
                var res = query.Select(s => new
                {
                    loss = s.LossRatio
                }).ToList();
            //最大值
            double Max = (double)res.Max(r => r.loss);
            //最小值
            double Min = (double)res.Min(r => r.loss);
            //分成10份差值
            double Dvalue = (Max - Min)/10;
            string str = ""+Dvalue;
            string[] strarr = str.Split(new char[] {'.'});
            int slength = strarr[1].Length;
            int MinInt = (int)Min;
            int Count = 0;
            List<double> douarr = new List<double>();
            for(int i = 0; i < 20; i++)
            {
                double listvalue =Math.Round(MinInt + i * Dvalue,slength);
                douarr.Add(listvalue);
                if (listvalue >= Max)
                {
                    Count = i;
                    break;
                }
            }
            int[] arr1 = new int[douarr.Count];
            foreach (var item in res)
                {
                    for (int i = 0; i < douarr.Count-1; i++)
                    {
                        if (item.loss >= (decimal)douarr[i] && item.loss < (decimal)douarr[i + 1])
                        {
                            arr1[i]++;
                        }
                        else if (item.loss >= (decimal)douarr[douarr.Count-1])
                        {
                            arr1[douarr.Count - 1]++;
                        }
                    }
                }
                decimal[] dearr = new decimal[arr1.Length];
            var sum = arr1.Sum();
            for(int i = 0; i < arr1.Length; i++)
            {
                dearr[i] = Math.Round((decimal)arr1[i] / sum*100,2);
            }
            var tranres = new
            {
                a = dearr,
                x = douarr,
                ca = Dvalue,
                l=slength
            };
            return tranres;
        }
        public Model.ViewObject.SupplyStackSumpowerpq_VO StackProEpq(DateTime currtime, DateTime begtime)
        {
            DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(new System.DateTime(1970, 1, 1, 0, 0, 0, 0));
            var res = dal.QueryWhere(f => f.DateTime >= begtime && f.DateTime <= currtime).OrderByDescending(o=>o.Id).Select(f => new
            {
                time = f.DateTime,
                flow = f.ProduceFlowStation,
                press = f.PipelinePressure,
                sumpower = f.SumPower
            }).FirstOrDefault();
            var timezone = startTime.Ticks;
                var trantimezone= (DateTime.Parse("" + res.time).AddHours(8).Ticks - timezone) / 10000;
                Model.ViewObject.SupplyStackSumpowerpq_VO list = new Model.ViewObject.SupplyStackSumpowerpq_VO()
                {
                   time=trantimezone,
                   Power=Convert.ToInt32(res.sumpower),
                   Press=(decimal)res.press,
                   ProduceStation=Convert.ToInt32(res.flow)
                };
            return list;
        }
        public List<Model.ViewObject.Supply_View> TrendReal(DateTime currtime, DateTime begtime)
        {
            var starttime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0)).Ticks;
            var res = dal.QuerySplitPage(d => d.DateTime >= begtime && d.DateTime <= currtime, or => or.OrderByDescending(o => o.DateTime), 200, 1).Select(s => new
            {
                time = s.DateTime,
                epower = s.SumPower,
                upi = s.UPI,
                pp=s.PipelinePressure
            }).OrderBy(oo => oo.time).ToList();
            List<Model.ViewObject.Supply_View> alllist = new List<Model.ViewObject.Supply_View>();
            foreach (var item in res)
            {
                var timetick = (DateTime.Parse("" + item.time).AddHours(8).Ticks - starttime) / 10000;
                Model.ViewObject.Supply_View list = new Model.ViewObject.Supply_View()
                {
                    time = timetick,
                    usef = item.epower,//电量
                    main = item.upi,//单耗
                    dtime = item.time.ToString()
                };
                alllist.Add(list);
            }
            return alllist;
        }
        public object TrendFacProducePressSumPower(DateTime currtime, DateTime begtime)
        {
            var starttime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0)).Ticks;
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            var res = query.ToList().OrderBy(q=>q.DateTime).Select(s=>new {
                time=(DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - starttime)/10000,
                flow=s.ProduceFlowStation,
                epower=s.SumPower,
                press=s.PipelinePressure,
                 upi=s.UPI,
                 dre=s.DRE,
                 bor=s.LossRatio,
                 run=s.RUN_NUM,
            }).ToList();
            return res;
        }
        public object TrendFacProducePressSumPowerAjax(DateTime currtime, DateTime begtime)
        {
            var starttime = TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0, 0)).Ticks;
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            var res = query.ToList().Select(s => new
            {
                time = (DateTime.Parse("" + s.DateTime).AddHours(8).Ticks - starttime) / 10000,
                flow = s.ProduceFlowStation,
                epower = s.SumPower,
                press = s.PipelinePressure,
                upi = s.UPI,
                dre = s.DRE,
                bor = s.LossRatio,
                run = s.RUN_NUM,
            }).FirstOrDefault();
            return res;
        }
        public List<decimal?> EnergyAnalsysUPI(DateTime currtime, DateTime begtime)
        {
            var res = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime).Select(s => new { s.UPI,s.ProduceFlowCentrifuge}).FirstOrDefault();
            List<decimal?> deres = new List<decimal?>();
            deres.Add(res.UPI);
            deres.Add(res.ProduceFlowCentrifuge);
            return deres;
        }
        public object ProduceEpower(DateTime currtime,DateTime begtime)
        {
            List<long> checktime = check.CheckTicks(currtime, begtime);
            var query = dal.QueryWhere(d => d.DateTime >= begtime && d.DateTime <= currtime);
            if (checktime[1] <= 24)
            {
                query = query.Where(x => x.Id % 2 == 1);
            }
            else
            {
                int dd = (int)checktime[1] / 12;
                 query=query.Where(x => x.Id % dd == 1);
            }
            var res=query.Select(s => new
             {
                 flow = s.ProduceFlowStation,
                 epower = s.SumPower
             }).ToList();
            return res;
        }
        #endregion
    } 
}
