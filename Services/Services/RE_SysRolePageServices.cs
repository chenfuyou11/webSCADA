//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using System.Linq;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class RE_SysRolePageServices:BaseServices<RE_SysRolePage>,IRE_SysRolePageServices
    {
    	IRE_SysRolePageRepository dal;
        ISB_SysRoleServices roledal;
        ISB_PageRepository pagedal;
       
        #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
        public RE_SysRolePageServices(IRE_SysRolePageRepository dal,
            ISB_SysRoleServices troledal,
        ISB_PageRepository tpagedal,
        IRE_SysRolePageRepository trolepagedal)
    	{
    		this.dal = dal;
    		base.baseDal = dal;
            roledal = troledal;
            pagedal = tpagedal;
    	}
        #endregion

        #region 针对此表的特殊操作写在此处
        public object RolePage(int Roleid,int page ,int limit,string showname)
        {
            //角色表
            var role = roledal.QueryWhere();
            //角色权限表
            var rolepageres = dal.QueryWhere(d => d.SysRoleID == Roleid);
            var allrolepageres = dal.QueryWhere(p => p.SysRoleID == Roleid);
            //权限表
            var pageres = pagedal.QueryWhere();
            if (showname != null)
            {
                var pageid = pagedal.QueryWhere(p => p.ShowName.Contains(showname)).ToList();
                if (pageid.Count()>0)
                {
                    List<int?> arr = new List<int?>();
                    foreach(var item in pageid)
                    {
                        arr.Add(item.ID);
                    }
                    rolepageres = rolepageres.Where(r => arr.Contains(r.PageID));
                }
                else
                {
                    rolepageres = rolepageres.Where(p => p.PageID == 0);
                }
            }
            //角色联表角色权限表
            var tt = role.Join(rolepageres.OrderBy(o=>o.ID).Skip((page-1)*limit).Take(limit).Join(pageres, m => m.PageID, n => n.ID, (m, n) => new
            {
                m.SysRoleID,
                n.ShowName,
                n.ID,
                n.ParentID
            }).OrderBy(o=>o.ID), r => r.ID, aa => aa.SysRoleID, (r, aa) => new
            {   sysid=aa.SysRoleID,
                rolename=r.Name,
                pagename=aa.ShowName,
                pageid=aa.ID,
                parentid=aa.ParentID
            }).ToList();
            var count = rolepageres.Count();
            var tranres = new
            {
                code = 0,
                msg = "success",
                data = tt,
                count = count
            };
            return tranres;
        }
        public int RolePageDelete(int roleid,int pageid,int parentid)
        {
            int result = 0;
            if (parentid == 0)
            {//
                List<Model.RE_SysRolePage> model = new List<RE_SysRolePage>();
                var pres = pagedal.QueryWhere(p => p.ParentID == pageid).ToList();
                if (pres.Count() > 0)
                {
                    foreach(var item in pres)
                    {
                       var child= dal.QueryWhere(d => d.SysRoleID == roleid && d.PageID == item.ID).FirstOrDefault();
                        if (child != null)
                        {
                            model.Add(child);
                        }
                    }
                }
                var parent = dal.QueryWhere(d => d.SysRoleID == roleid && d.PageID == pageid).FirstOrDefault();
                model.Add(parent);
                dal.DeleteList(model);
                result=dal.SaveChanges();
            }
            else
            {
                var res = dal.QueryWhere(d => d.SysRoleID == roleid && d.PageID == pageid).FirstOrDefault();
                dal.Delete(res, true);
                result = dal.SaveChanges();
            }
            return result;
        }
        public List<Model.ModelViews.MainPage_View> AddPageLayer(int roleid)
        {
            var res=dal.QueryWhere(d => d.SysRoleID == roleid).ToList();
            var page = pagedal.QueryWhere(p=>p.ParentID>=0);
            foreach(var item in res)
            {
                page = page.Where(p => p.ID != item.PageID);
            }
            //查出所有没在表中的pageid
            var result = page.OrderBy(o=>o.SortN).ToList();
            
            var pageres = pagedal.QueryWhere(p => p.ParentID == 0);
            List<Model.ModelViews.MainPage_View> model = new List<Model.ModelViews.MainPage_View>();
            foreach(var item in result)
            {
                //如果父类id为0
                if (item.ParentID == 0)
                {
                   var child= result.Where(r => r.ParentID == item.ID).ToList();
                    Model.ModelViews.MainPage_View view = new Model.ModelViews.MainPage_View()
                    {
                        Page=item,
                        childPage=child,
                        mark=1
                    };
                    model.Add(view);
                }
                else
                {   //判断查其父类有没有
                    var test = result.Where(r => r.ID == item.ParentID);
                    if (test.Count() > 0)//说明有父类存在
                    {

                    }
                    else//无父类存在
                    {
                        //找它的父类
                        var findparent = pagedal.QueryWhere(p => p.ID == item.ParentID).FirstOrDefault();
                        var child = result.Where(r => r.ParentID == findparent.ID).ToList();
                        Model.ModelViews.MainPage_View view = new Model.ModelViews.MainPage_View()
                        {
                            Page = findparent,
                            childPage = child,
                            mark=0
                        };
                        model.Add(view);
                    }
                }
            }
            var zz = model.GroupBy(m => m.Page).ToList();
            var bb = model.GroupBy(m => m.Page).Select(m=>m.First()).ToList();
            model.Clear();
            foreach(var item in bb)
            {
                model.Add(item);
            }
            return model;
        }
        public int SavePage(List<int> model,int roleid)
        {
            List<Model.RE_SysRolePage> all = new List<RE_SysRolePage>();
            foreach (var item in model)
            {
                Model.RE_SysRolePage sysrolelist = new RE_SysRolePage()
                {
                    SysRoleID = roleid,
                    PageID=item
                };
                all.Add(sysrolelist);
            }
            dal.AddRange(all);
            int b = dal.SaveChanges();
            return b;
        }
        #endregion
    } 
}
