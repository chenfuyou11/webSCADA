//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services
{
    using System;
    using System.Collections.Generic;

    using Model;
    using Base;
    using IServices;
    using IRepository;
    using System.Linq;
    using CommonHelper;

    /// <summary>
    /// 负责每个数据表的业务逻辑操作的约定
    /// </summary>
    public partial class BB_StationServices:BaseServices<BB_Station>,IBB_StationServices
    {
    	IBB_StationRepository dal;
        IBB_FactoryRepository facdal;
        ISB_ClientRepository clidal;
      #region 定义构造函数，接收autofac将数据仓储层的具体实现类的对象注入到此类中
    	public BB_StationServices(IBB_StationRepository dal,
            IBB_FactoryRepository tfacdal, ISB_ClientRepository tclidal)
    	{
    		this.dal = dal;
    		base.baseDal = dal;
            facdal = tfacdal;
            clidal = tclidal;
    	}
      #endregion
    
       #region 针对此表的特殊操作写在此处
        public object StationListJson(int limit,int page,string code)
        {
            var query = dal.QueryWhere();
            int num;
            decimal dnum;
            if (code != null)
            {
                if(int.TryParse(code,out num))
                {
                    num = Convert.ToInt32(code);
                    query = query.Where(x => x.ID==num||x.GasMainSize==num);
                }
                else if(decimal.TryParse(code,out dnum))
                {
                    dnum = Convert.ToDecimal(code);
                    query = query.Where(x => x.Latitude.Equals(dnum) || x.Longtitude == dnum || x.StationArea == dnum || x.NearGasArea == dnum);
                }
                else
                {
                    if (code == "有效")
                    {
                        query = query.Where(x => x.Valid.Equals("1"));
                    }
                   else if (code == "无效")
                    {
                        query = query.Where(x => x.Valid.Equals("0"));
                    }
                    else
                    {
                        var fac = facdal.QueryWhere(x => x.Name.Contains(code)).ToList();
                        if (fac.Count() > 0)
                        {
                            foreach (var item in fac)
                            {
                                query = query.Where(x => x.FactoryID == item.ID);
                            }
                        }
                        else
                        {
                            var cli = clidal.QueryWhere(x => x.Name.Contains(code)).ToList();
                            if (cli.Count() > 0)
                            {
                                foreach(var item in cli)
                                {
                                    query = query.Where(x => x.ClientID == item.ID);
                                }
                            }
                            else
                            {
                                query = query.Where(x => x.Introduction.Contains(code) || x.Name.Contains(code) || x.StationControlSystem.Contains(code) || x.Code.Contains(code) || x.DeviceBindMode.Contains(code));
                            }
                        }
                    }
                }
            }
            var res = query.OrderBy(o => o.ID).Skip((page - 1) * limit).Take(limit).ToList().Select(s => new
            {
                s.ID,
                s.Code,
                s.Name,
                s.Introduction,
                s.Latitude,
                s.Longtitude,
                FactoryID=facdal.Find(new object[]{s.FactoryID }).Name,
                ClientID=clidal.Find(new object[] { s.ClientID }).Name,
                s.GasMainSize,
                s.DeviceBindMode,
                s.StationArea,
                s.NearGasArea,
                s.StationControlSystem,
                Valid=Enum.GetName(typeof(Enums.Valid),Convert.ToInt32(s.Valid)),
                s.Remark
            }).ToList();
            var count = query.Count();
            var tranres = new
            {
                code = 0,
                msg = "success",
                data = res,
                count
            };
            return tranres;
        }    
       public Model.BussionObject.StationShow_BO ModiStation( int id)
        {
            var res = dal.Find(new object[] { id });
            Model.BussionObject.StationShow_BO mmodel = new Model.BussionObject.StationShow_BO()
            {
                ID=res.ID,
                StationArea = res.StationArea,
                StationControlSystem = res.StationControlSystem,
                GasMainSize = res.GasMainSize,
                NearGasArea = res.NearGasArea,
                Name = res.Name,
                DeviceBindMode = res.DeviceBindMode,
                ClientID = res.ClientID,
                FactoryID = res.FactoryID,
                Code = res.Code,
                Introduction = res.Introduction,
                Latitude = res.Latitude,
                Longtitude = res.Longtitude,
                Remark = res.Remark,
                Valid=res.Valid
            };
            return mmodel;
        }
        public int ModiStation(Model.BussionObject.StationShow_BO model)
        {
            Model.BB_Station bmodel = new BB_Station()
            {
                ID=model.ID,
                StationArea = model.StationArea,
                StationControlSystem = model.StationControlSystem,
                GasMainSize = model.GasMainSize,
                NearGasArea = model.NearGasArea,
                Name = model.Name,
                DeviceBindMode = model.DeviceBindMode,
                ClientID = model.ClientID,
                FactoryID = model.FactoryID,
                Code = model.Code,
                Introduction = model.Introduction,
                Latitude = model.Latitude,
                Longtitude = model.Longtitude,
                Remark = model.Remark,
                Valid=model.Valid
            };
            dal.Update(bmodel);
            var res = dal.SaveChanges();
            return res;
        }
        public int AddStation(Model.BussionObject.StationShow_BO model)
        {
            Model.BB_Station bmodel = new BB_Station()
            {
                StationArea = model.StationArea,
                StationControlSystem = model.StationControlSystem,
                GasMainSize = model.GasMainSize,
                NearGasArea = model.NearGasArea,
                Name = model.Name,
                DeviceBindMode = model.DeviceBindMode,
                ClientID = model.ClientID,
                FactoryID = model.FactoryID,
                Code = model.Code,
                Introduction = model.Introduction,
                Latitude = model.Latitude,
                Longtitude = model.Longtitude,
                Remark = model.Remark,
                Valid = model.Valid
            };
            dal.Add(bmodel);
            var res = dal.SaveChanges();
            return res;
        }
      #endregion
    } 
}
