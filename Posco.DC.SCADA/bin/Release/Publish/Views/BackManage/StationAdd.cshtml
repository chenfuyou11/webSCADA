@model Model.BussionObject.StationShow_BO

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>StationAdd</title>
    <link href="~/Content/ListLayui/static/admin/layui/css/layui.css" rel="stylesheet" />
    <link href="~/Content/ListLayui/static/admin/css/admin.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-3.3.1.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Content/ListLayui/static/admin/layui/layui.js"></script>
</head>
<body>
    <form class="layui-form" id="editForm" style="width: 90%;padding-top: 20px; margin:0 auto;">
        @Html.AntiForgeryToken()
        <h4>添加空压站信息</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="layui-form-item">
            @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "layui-input" } })
                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "layui-input" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.Introduction, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.EditorFor(model => model.Introduction, new { htmlAttributes = new { @class = "layui-input" } })
                @Html.ValidationMessageFor(model => model.Introduction, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "layui-input" } })
                @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.Longtitude, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.EditorFor(model => model.Longtitude, new { htmlAttributes = new { @class = "layui-input" } })
                @Html.ValidationMessageFor(model => model.Longtitude, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.FactoryID, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.DropDownListFor(model => model.FactoryID, ViewBag.Factory as SelectList, new { })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.ClientID, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.DropDownListFor(model => model.ClientID, ViewBag.Client as SelectList, new { })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.GasMainSize, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.EditorFor(model => model.GasMainSize, new { htmlAttributes = new { @class = "layui-input" } })
                @Html.ValidationMessageFor(model => model.GasMainSize, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.DeviceBindMode, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.EditorFor(model => model.DeviceBindMode, new { htmlAttributes = new { @class = "layui-input" } })
                @Html.ValidationMessageFor(model => model.DeviceBindMode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.StationArea, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.EditorFor(model => model.StationArea, new { htmlAttributes = new { @class = "layui-input" } })
                @Html.ValidationMessageFor(model => model.StationArea, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.NearGasArea, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.EditorFor(model => model.NearGasArea, new { htmlAttributes = new { @class = "layui-input" } })
                @Html.ValidationMessageFor(model => model.NearGasArea, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.StationControlSystem, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.EditorFor(model => model.StationControlSystem, new { htmlAttributes = new { @class = "layui-input" } })
                @Html.ValidationMessageFor(model => model.StationControlSystem, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.Valid, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.EditorFor(model => model.Valid, new { htmlAttributes = new { @class = "layui-input" } })
                @Html.ValidationMessageFor(model => model.Valid, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="layui-form-item">
            @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "layui-form-label" })
            <div class="layui-input-block">
                @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "layui-input" } })
                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="layui-form-item">
            <div class="layui-input-block">
                <button class="layui-btn" lay-submit lay-filter="formDemo">确定</button>
                <button type="reset" class="layui-btn layui-btn-primary">重置</button>
            </div>

        </div>
    </form>

</body>
</html>
<script>
    layui.use('form', function () {
        //对下拉框进行渲染,不然下拉框出不来
        var form = layui.form;
        //监听提交
        form.on('submit(formDemo)', function (data) {
            var index = parent.layer.getFrameIndex(window.name);
            $.ajax({
                url: '/BackManage/StationAdd',
                type: 'POST',
                data: data.field,
                dataType: 'json',
                success: function (data) {
                    if (data == "OK") {
                        layer.msg("修改成功", {
                            time: 1000,
                            icon: 1
                        }, function () {
                            window.parent.location.reload();//刷新父页面
                            //关闭弹窗
                            var index = parent.layer.getFrameIndex(window.name);
                            parent.layer.close(index); //关闭当前页
                        });
                    }
                    else if (data == "E") {
                        layer.msg("不能有空值", {
                            icon: 2
                        })
                    }
                }
            });
            return false;
        });
    });
</script>
